// app/api/batch/submit/route.js - –§–ò–ù–ê–õ–¨–ù–ê–Ø –≤–µ—Ä—Å–∏—è —Å –Ω–∞–¥–µ–∂–Ω–æ–π KV –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π
export const runtime = "edge";

import { NextResponse } from "next/server";
import { verifyReviewToken } from "@/lib/token";
import { NotionBatchProcessor, addBatchToKVQueue, isKVConnected, initKV } from "@/lib/kv-queue";
import { notion } from "@/lib/notion";

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ª–∏–º–∏—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
const LIMITS = {
  DIRECT_PROCESSING: {
    maxOperations: 10,
    maxOperationSize: 8000
  },
  KV_QUEUE: {
    maxOperations: 1000,
    maxOperationSize: 10000
  },
  GENERAL: {
    maxConcurrency: 3,
    minRateLimit: 2000,
    maxRetries: 3
  }
};

export async function POST(req, context) {
  console.log('[BATCH SUBMIT] ===== üöÄ –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ batch –æ–±—Ä–∞–±–æ—Ç–∫—É =====');
  
  // –ö–†–ò–¢–ò–ß–ù–û: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è KV —Å context –¥–ª—è Cloudflare Pages
  console.log('[BATCH SUBMIT] üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è KV —Å –ø–æ–ª–Ω—ã–º context...');
  console.log('[BATCH SUBMIT] üîç Context –∞–Ω–∞–ª–∏–∑:', {
    hasContext: !!context,
    contextType: typeof context,
    hasEnv: !!context?.env,
    hasKVInEnv: !!context?.env?.NOTION_QUEUE_KV,
    envKeys: context?.env ? Object.keys(context.env) : []
  });
  
  try {
    const kvInitResult = initKV(context); // –ö–†–ò–¢–ò–ß–ù–û: –ø–µ—Ä–µ–¥–∞–µ–º –≤–µ—Å—å context
    console.log(`[BATCH SUBMIT] KV –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: ${kvInitResult ? '‚úÖ –£–°–ü–ï–®–ù–û' : '‚ùå –ù–ï–£–î–ê–ß–ù–û'}`);
    
    if (!kvInitResult) {
      console.warn('[BATCH SUBMIT] ‚ö†Ô∏è KV –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ—É–¥–∞—á–Ω–∞, –¥–µ—Ç–∞–ª–∏:', {
        contextProvided: !!context,
        contextEnv: !!context?.env,
        contextKV: !!context?.env?.NOTION_QUEUE_KV,
        globalKV: typeof NOTION_QUEUE_KV !== 'undefined'
      });
    }
  } catch (initError) {
    console.error('[BATCH SUBMIT] ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ KV:', initError.message);
  }
  
  try {
    // 1. –ü–∞—Ä—Å–∏–Ω–≥ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    let body;
    try {
      body = await req.json();
    } catch (parseError) {
      console.error('[BATCH SUBMIT] ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', parseError.message);
      return NextResponse.json(
        { 
          error: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞",
          details: "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö"
        },
        { status: 400 }
      );
    }

    console.log(`[BATCH SUBMIT] üì• –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: ${Object.keys(body).join(', ')}`);

    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const authHeader = req.headers.get('authorization');
    const token = authHeader?.replace('Bearer ', '');
    
    if (!token) {
      return NextResponse.json(
        { error: "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –î–æ–±–∞–≤—å—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫: Authorization: Bearer <token>" },
        { status: 401 }
      );
    }

    let payload;
    try {
      payload = await verifyReviewToken(token);
      console.log('[BATCH SUBMIT] ‚úÖ –¢–æ–∫–µ–Ω –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', payload.reviewerUserId);
    } catch (tokenError) {
      console.error('[BATCH SUBMIT] ‚ùå –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞:', tokenError.message);
      return NextResponse.json(
        { 
          error: "–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∏–ª–∏ –∏—Å—Ç—ë–∫—à–∏–π —Ç–æ–∫–µ–Ω",
          suggestion: "–ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
        },
        { status: 401 }
      );
    }

    // 3. –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π
    const { operations = [], options = {} } = body;

    if (!Array.isArray(operations) || operations.length === 0) {
      return NextResponse.json(
        { 
          error: "–ù–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏",
          expected: "–ú–∞—Å—Å–∏–≤ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ø–æ–ª—è–º–∏: pageId, properties"
        },
        { status: 400 }
      );
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞–∂–¥–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
    for (let i = 0; i < operations.length; i++) {
      const op = operations[i];
      if (!op.pageId || typeof op.pageId !== 'string') {
        return NextResponse.json(
          { 
            error: `–û–ø–µ—Ä–∞—Ü–∏—è ${i + 1}: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π pageId`,
            details: "pageId –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π"
          },
          { status: 400 }
        );
      }
      
      if (!op.properties || typeof op.properties !== 'object') {
        return NextResponse.json(
          { 
            error: `–û–ø–µ—Ä–∞—Ü–∏—è ${i + 1}: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ properties`,
            details: "properties –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º"
          },
          { status: 400 }
        );
      }
    }

    console.log(`[BATCH SUBMIT] ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞: ${operations.length} –æ–ø–µ—Ä–∞—Ü–∏–π`);

    // 4. –ö–†–ò–¢–ò–ß–ù–û: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π KV —Å–æ—Å—Ç–æ—è–Ω–∏—è
    const kvAvailable = isKVConnected();
    let processingMode = 'direct';
    let limits = LIMITS.DIRECT_PROCESSING;

    console.log(`[BATCH SUBMIT] üìä –ê–Ω–∞–ª–∏–∑ —Ä–µ–∂–∏–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:`);
    console.log(`  - KV –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: ${kvAvailable ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢'}`);
    console.log(`  - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π: ${operations.length}`);
    console.log(`  - –õ–∏–º–∏—Ç –ø—Ä—è–º–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${LIMITS.DIRECT_PROCESSING.maxOperations}`);

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ KV, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ
    const forceKV = options.forceKV === true || body.forceKV === true;

    if (forceKV) {
      if (!kvAvailable) {
        console.warn('[BATCH SUBMIT] ‚ö†Ô∏è KV –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—Ä–æ—à–µ–Ω–æ, –Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ');
        return NextResponse.json(
          {
            error: '‚ùå Cloudflare KV –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ',
            suggestion: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ KV –∏ –ø–µ—Ä–µ—Ä–∞–∑–≤–µ—Ä–Ω–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
            kvStatus: 'unavailable',
            troubleshooting: {
              step1: 'üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É: /api/kv/diagnostics',
              step2: 'üîÑ –ü–µ—Ä–µ—Ä–∞–∑–≤–µ—Ä–Ω–∏—Ç–µ: npm run cf:deploy',
              step3: '‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 2-3 –º–∏–Ω—É—Ç—ã –ø–æ—Å–ª–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è',
              step4: 'üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ Dashboard'
            }
          },
          { status: 503 }
        );
      }
      processingMode = 'kv_queue';
      limits = LIMITS.KV_QUEUE;
      console.log('[BATCH SUBMIT] üéØ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã–±—Ä–∞–Ω KV —Ä–µ–∂–∏–º');
    } else if (operations.length > LIMITS.DIRECT_PROCESSING.maxOperations) {
      if (kvAvailable) {
        processingMode = 'kv_queue';
        limits = LIMITS.KV_QUEUE;
        console.log('[BATCH SUBMIT] üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–∞–Ω KV —Ä–µ–∂–∏–º (–±–æ–ª—å—à–æ–π –æ–±—ä–µ–º)');
      } else {
        console.warn('[BATCH SUBMIT] ‚ö†Ô∏è –ë–æ–ª—å—à–æ–π –æ–±—ä–µ–º –æ–ø–µ—Ä–∞—Ü–∏–π, –Ω–æ KV –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ');
        return NextResponse.json(
          {
            error: `‚ùå –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–æ–ª–µ–µ ${LIMITS.DIRECT_PROCESSING.maxOperations} –æ–ø–µ—Ä–∞—Ü–∏–π —Ç—Ä–µ–±—É–µ—Ç—Å—è Cloudflare KV`,
            details: "KV –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ø—Ä—è–º—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ",
            currentOperations: operations.length,
            maxDirectOperations: LIMITS.DIRECT_PROCESSING.maxOperations,
            kvStatus: 'unavailable',
            troubleshooting: {
              immediate: `‚ö° –°—Ä–æ—á–Ω–æ: –û—Ü–µ–Ω–∏—Ç–µ –Ω–µ –±–æ–ª–µ–µ ${LIMITS.DIRECT_PROCESSING.maxOperations} –Ω–∞–≤—ã–∫–æ–≤ –∑–∞ —Ä–∞–∑`,
              setup: 'üõ†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ KV: /api/kv/diagnostics',
              help: 'üìû –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –µ—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –Ω–µ —Ä–µ—à–∞–µ—Ç—Å—è'
            }
          },
          { status: 503 }
        );
      }
    }

    console.log(`[BATCH SUBMIT] üéØ –§–ò–ù–ê–õ–¨–ù–´–ô —Ä–µ–∂–∏–º: ${processingMode}`);
    console.log(`[BATCH SUBMIT] üìä KV —Å—Ç–∞—Ç—É—Å: ${kvAvailable ? '–î–û–°–¢–£–ü–ï–ù' : '–ù–ï–î–û–°–¢–£–ü–ï–ù'}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
    if (operations.length > limits.maxOperations) {
      return NextResponse.json(
        {
          error: `‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è —Ä–µ–∂–∏–º–∞ ${processingMode}`,
          details: {
            provided: operations.length,
            maxAllowed: limits.maxOperations,
            processingMode: processingMode,
            kvAvailable: kvAvailable,
            suggestion: `–†–∞–∑–±–µ–π—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞ –ø–∞–∫–µ—Ç—ã –ø–æ ${limits.maxOperations} –æ–ø–µ—Ä–∞—Ü–∏–π`
          }
        },
        { status: 400 }
      );
    }

    // 5. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
    const processorOptions = {
      batchSize: Math.min(options.batchSize || (operations.length <= 25 ? 25 : 50), 75),
      concurrency: Math.min(options.concurrency || 2, LIMITS.GENERAL.maxConcurrency),
      rateLimitDelay: Math.max(options.rateLimitDelay || 2500, LIMITS.GENERAL.minRateLimit),
      maxRetries: Math.min(options.maxRetries || 3, LIMITS.GENERAL.maxRetries),
      useKV: processingMode === 'kv_queue',
      reviewerUserId: payload.reviewerUserId,
      teamName: payload.teamName || 'unknown'
    };

    console.log('[BATCH SUBMIT] ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞:', processorOptions);

    // 6. –ö–†–ò–¢–ò–ß–ù–û: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if (processingMode === 'kv_queue') {
      console.log('[KV QUEUE] üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —á–µ—Ä–µ–∑ Cloudflare KV');
      try {
        // –°–æ–∑–¥–∞–µ–º batch –≤ KV
        const { batchId, jobIds } = await addBatchToKVQueue(operations, processorOptions);
        console.log(`[KV QUEUE] ‚úÖ –£–°–ü–ï–•! –°–æ–∑–¥–∞–Ω–æ –∑–∞–¥–∞—á: ${jobIds.length}, Batch ID: ${batchId}`);
        
        return NextResponse.json({
          success: true,
          mode: 'kv_queue',
          batchId: batchId,
          jobIds: jobIds,
          totalOperations: operations.length,
          totalJobs: jobIds.length,
          estimatedDuration: Math.ceil(operations.length * 3),
          message: `üéâ –£–°–ü–ï–®–ù–û! –î–æ–±–∞–≤–ª–µ–Ω–æ ${operations.length} –æ–ø–µ—Ä–∞—Ü–∏–π –≤ –æ—á–µ—Ä–µ–¥—å KV. –°–æ–∑–¥–∞–Ω–æ ${jobIds.length} –∑–∞–¥–∞—á.`,
          statusEndpoint: `/api/batch/status?jobIds=${jobIds.join(',')}`,
          resultsEndpoint: `/api/batch/results?jobIds=${jobIds.join(',')}`,
          processorOptions: {
            batchSize: processorOptions.batchSize,
            concurrency: processorOptions.concurrency,
            rateLimitDelay: processorOptions.rateLimitDelay,
            useKV: true
          },
          instructions: {
            checkStatus: "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ statusEndpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞",
            getResults: "–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ resultsEndpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
            polling: "–ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 15-20 —Å–µ–∫—É–Ω–¥"
          },
          kvDiagnostics: "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –ø—Ä–æ–±–ª–µ–º—ã, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ /api/kv/diagnostics"
        });
        
      } catch (kvError) {
        console.error('[KV QUEUE] ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –æ—à–∏–±–∫–∞ KV:', kvError.message);
        console.error('[KV QUEUE] Stack trace:', kvError.stack);
        
        // –ü—Ä–∏ –æ—à–∏–±–∫–µ KV –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –ø—Ä—è–º—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
        if (operations.length <= LIMITS.DIRECT_PROCESSING.maxOperations) {
          console.log('[KV QUEUE] üîÑ –≠–ö–°–¢–†–ï–ù–ù–û–ï –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ø—Ä—è–º—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É');
          const directOptions = { ...processorOptions, useKV: false };
          return await handleDirectProcessing(operations, directOptions, 'kv_fallback');
        } else {
          return NextResponse.json(
            { 
              error: "‚ùå Cloudflare KV –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ",
              details: kvError.message,
              suggestion: "–£–º–µ–Ω—å—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –ø—Ä—è–º–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏",
              fallbackMode: "direct_processing", 
              maxDirectOperations: LIMITS.DIRECT_PROCESSING.maxOperations,
              currentOperations: operations.length,
              diagnostics: "/api/kv/diagnostics"
            },
            { status: 503 }
          );
        }
      }
    } else {
      // –ü—Ä—è–º–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
      console.log('[DIRECT PROCESSING] üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É');
      return await handleDirectProcessing(operations, processorOptions, 'direct');
    }

  } catch (error) {
    console.error('[BATCH SUBMIT] ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –æ—à–∏–±–∫–∞:', {
      message: error.message,
      stack: error.stack,
      timestamp: new Date().toISOString()
    });

    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
    if (error.message?.includes('KV')) {
      return NextResponse.json(
        { 
          error: "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ Cloudflare KV",
          details: error.message,
          suggestion: "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É KV",
          diagnostics: "/api/kv/diagnostics",
          fallbackMode: "direct_processing"
        },
        { status: 503 }
      );
    }

    if (error.status === 429) {
      return NextResponse.json(
        { 
          error: "‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Notion API",
          retryAfter: error.headers?.['retry-after'] || 60,
          suggestion: "–ü–æ–¥–æ–∂–¥–∏—Ç–µ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π"
        },
        { status: 429 }
      );
    }

    if (error.status === 401 || error.status === 403) {
      return NextResponse.json(
        { 
          error: "üîê –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å Notion API",
          suggestion: "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ–∫–µ–Ω–∞ Notion –∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞"
        },
        { status: 403 }
      );
    }

    return NextResponse.json(
      {
        error: process.env.NODE_ENV === 'development' 
          ? `‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: ${error.message}`
          : "‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        requestId: Date.now().toString(36),
        diagnostics: "/api/kv/diagnostics"
      },
      { status: 500 }
    );
  }
}

// –£–õ–£–ß–®–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä—è–º–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
async function handleDirectProcessing(operations, options, reason = 'direct') {
  console.log(`[DIRECT PROCESSING] üöÄ –ü—Ä–∏—á–∏–Ω–∞: ${reason}, –æ–ø–µ—Ä–∞—Ü–∏–π: ${operations.length}`);
  
  try {
    const processor = new NotionBatchProcessor(notion, options);
    const result = await processor.processBatchDirectly(operations);
    
    const successRate = result.stats.totalOperations > 0 ?
      (result.stats.successful / result.stats.totalOperations * 100).toFixed(1) : 0;

    const message = reason === 'kv_fallback' 
      ? `üîÑ KV –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø—Ä—è–º–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞. –£—Å–ø–µ—à–Ω–æ: ${result.stats.successful}/${result.stats.totalOperations} (${successRate}%). –í—Ä–µ–º—è: ${(result.stats.duration / 1000).toFixed(1)}—Å.`
      : `‚úÖ –ü—Ä—è–º–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –£—Å–ø–µ—à–Ω–æ: ${result.stats.successful}/${result.stats.totalOperations} (${successRate}%). –í—Ä–µ–º—è: ${(result.stats.duration / 1000).toFixed(1)}—Å.`;

    return NextResponse.json({
      success: true,
      mode: reason === 'kv_fallback' ? 'direct_processing_fallback' : 'direct_processing',
      results: result.results,
      stats: result.stats,
      message: message,
      completed: true,
      timestamp: new Date().toISOString(),
      kvFallback: reason === 'kv_fallback'
    });
    
  } catch (directError) {
    console.error('[DIRECT PROCESSING] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä—è–º–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏:', directError.message);
    
    return NextResponse.json(
      {
        error: "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä—è–º–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–µ—Ä–∞—Ü–∏–π",
        details: directError.message,
        mode: 'direct_processing_failed',
        suggestion: "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–º–µ–Ω—å—à–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ"
      },
      { status: 500 }
    );
  }
}

// –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π endpoint
export async function GET(req, context) {
  console.log('[BATCH SUBMIT] üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å');
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è KV –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
  const kvInitResult = initKV(context);
  
  return NextResponse.json({
    service: "Notion Batch Processing API",
    status: "operational",
    runtime: "edge",
    timestamp: new Date().toISOString(),
    
    kv: {
      available: isKVConnected(),
      initialized: kvInitResult,
      diagnosticsUrl: "/api/kv/diagnostics"
    },
    
    context: {
      provided: !!context,
      hasEnv: !!context?.env,
      envKeys: context?.env ? Object.keys(context.env) : [],
      hasKVInEnv: !!context?.env?.NOTION_QUEUE_KV,
      hasBindings: !!context?.bindings,
      bindingsKeys: context?.bindings ? Object.keys(context.bindings) : []
    },
    
    limits: LIMITS,
    
    env: {
      hasNotionToken: !!process.env.NOTION_TOKEN,
      hasJWTSecret: !!process.env.JWT_SECRET,
      notionQueueKV: typeof NOTION_QUEUE_KV !== 'undefined' ? 'available' : 'not_bound'
    },
    
    endpoints: {
      submit: "/api/batch/submit",
      status: "/api/batch/status", 
      results: "/api/batch/results",
      diagnostics: "/api/kv/diagnostics"
    },
    
    troubleshooting: {
      kvUnavailable: "üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ /api/kv/diagnostics",
      rateLimits: "–£–º–µ–Ω—å—à–∏—Ç–µ concurrency –∏ —É–≤–µ–ª–∏—á—å—Ç–µ rateLimitDelay",
      largeOperations: "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ KV –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π > 10",
      deployment: "üîÑ –ü–µ—Ä–µ—Ä–∞–∑–≤–µ—Ä–Ω–∏—Ç–µ: npm run cf:deploy"
    },
    
    quickChecks: {
      contextOk: !!context && !!context.env,
      kvInContext: !!context?.env?.NOTION_QUEUE_KV,
      kvConnected: isKVConnected(),
      readyForLargeOperations: isKVConnected()
    }
  });
}