// app/api/batch/submit/route.js - –§–ò–ù–ê–õ–¨–ù–ê–Ø –≤–µ—Ä—Å–∏—è —Å –Ω–∞–¥–µ–∂–Ω–æ–π KV –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π
export const runtime = "edge";

import { NextResponse } from "next/server";
import { verifyReviewToken } from "@/lib/token";
import { NotionBatchProcessor, addBatchToKVQueue, isKVConnected, initKV } from "@/lib/kv-queue";
import { notion } from "@/lib/notion";

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ª–∏–º–∏—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
const LIMITS = {
  DIRECT_PROCESSING: {
    maxOperations: 10,
    maxOperationSize: 8000
  },
  KV_QUEUE: {
    maxOperations: 1000,
    maxOperationSize: 10000
  },
  GENERAL: {
    maxConcurrency: 3,
    minRateLimit: 2000,
    maxRetries: 3
  }
};

export async function POST(req, context) {
  console.log('[BATCH SUBMIT] ===== üöÄ –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ batch –æ–±—Ä–∞–±–æ—Ç–∫—É (Next.js –Ω–∞ CF Pages) =====');
  
  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è KV –¥–ª—è Next.js –Ω–∞ Cloudflare Pages
  console.log('[BATCH SUBMIT] üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è KV –¥–ª—è Next.js –Ω–∞ CF Pages...');
  console.log('[BATCH SUBMIT] üìä Context –∞–Ω–∞–ª–∏–∑:', {
    hasContext: !!context,
    contextKeys: context ? Object.keys(context) : [],
    globalKVExists: typeof NOTION_QUEUE_KV !== 'undefined',
    processEnvKV: typeof process?.env?.NOTION_QUEUE_KV
  });
  
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º KV —Å context, –Ω–æ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ
    const kvInitResult = initKV(context);
    console.log(`[BATCH SUBMIT] KV –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: ${kvInitResult ? '‚úÖ –£–°–ü–ï–®–ù–û' : '‚ö†Ô∏è –ù–ï–£–î–ê–ß–ù–û (–ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ KV)'}`);
  } catch (initError) {
    console.warn('[BATCH SUBMIT] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ KV (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ):', initError.message);
  }
  
  
  
// –£–õ–£–ß–®–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä—è–º–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
async function handleDirectProcessing(operations, options, reason = 'direct') {
  console.log(`[DIRECT PROCESSING] üöÄ –ü—Ä–∏—á–∏–Ω–∞: ${reason}, –æ–ø–µ—Ä–∞—Ü–∏–π: ${operations.length}`);
  
  try {
    const processor = new NotionBatchProcessor(notion, options);
    const result = await processor.processBatchDirectly(operations);
    
    const successRate = result.stats.totalOperations > 0 ?
      (result.stats.successful / result.stats.totalOperations * 100).toFixed(1) : 0;

    const message = reason === 'kv_fallback' 
      ? `üîÑ KV –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø—Ä—è–º–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞. –£—Å–ø–µ—à–Ω–æ: ${result.stats.successful}/${result.stats.totalOperations} (${successRate}%). –í—Ä–µ–º—è: ${(result.stats.duration / 1000).toFixed(1)}—Å.`
      : `‚úÖ –ü—Ä—è–º–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –£—Å–ø–µ—à–Ω–æ: ${result.stats.successful}/${result.stats.totalOperations} (${successRate}%). –í—Ä–µ–º—è: ${(result.stats.duration / 1000).toFixed(1)}—Å.`;

    return NextResponse.json({
      success: true,
      mode: reason === 'kv_fallback' ? 'direct_processing_fallback' : 'direct_processing',
      results: result.results,
      stats: result.stats,
      message: message,
      completed: true,
      timestamp: new Date().toISOString(),
      kvFallback: reason === 'kv_fallback'
    });
    
  } catch (directError) {
    console.error('[DIRECT PROCESSING] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä—è–º–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏:', directError.message);
    
    return NextResponse.json(
      {
        error: "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä—è–º–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–µ—Ä–∞—Ü–∏–π",
        details: directError.message,
        mode: 'direct_processing_failed',
        suggestion: "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–º–µ–Ω—å—à–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ"
      },
      { status: 500 }
    );
  }
}

export async function GET(req, context) {
  console.log('[KV DIAGNOSTICS] üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –¥–ª—è Next.js –Ω–∞ Cloudflare Pages');
  
  const diagnostics = {
    timestamp: new Date().toISOString(),
    runtime: "edge",
    platform: "Next.js –Ω–∞ Cloudflare Pages",
    url: req.url,
    nextjsVersion: "14.2.5"
  };

  // –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ context –¥–ª—è Next.js
  diagnostics.context = {
    provided: !!context,
    type: typeof context,
    contextKeys: context ? Object.keys(context) : [],
    
    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    hasEnv: !!context?.env,
    hasBindings: !!context?.bindings,
    envKeys: context?.env ? Object.keys(context.env) : [],
    
    // Next.js —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    nextjsSpecific: {
      hasParams: !!context?.params,
      paramsKeys: context?.params ? Object.keys(context.params) : []
    }
  };

  // –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø–æ—Å–æ–±–æ–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ KV
  diagnostics.kvAccess = {
    globalNOTION_QUEUE_KV: {
      exists: typeof NOTION_QUEUE_KV !== 'undefined',
      type: typeof NOTION_QUEUE_KV,
      isKVObject: typeof NOTION_QUEUE_KV !== 'undefined' && 
                  typeof NOTION_QUEUE_KV === 'object' &&
                  typeof NOTION_QUEUE_KV.get === 'function'
    },
    globalThisAccess: {
      exists: typeof globalThis !== 'undefined' && !!globalThis.NOTION_QUEUE_KV,
      type: typeof globalThis?.NOTION_QUEUE_KV
    },
    processEnvAccess: {
      exists: !!(process?.env?.NOTION_QUEUE_KV),
      type: typeof process?.env?.NOTION_QUEUE_KV,
      isObject: typeof process?.env?.NOTION_QUEUE_KV === 'object'
    },
    contextAccess: {
      throughEnv: !!context?.env?.NOTION_QUEUE_KV,
      throughBindings: !!context?.bindings?.NOTION_QUEUE_KV,
      directContext: !!context?.NOTION_QUEUE_KV
    }
  };

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è KV —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  console.log('[KV DIAGNOSTICS] üîß –ü–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ KV...');
  const kvInitResult = initKV(context);
  
  diagnostics.kvInitialization = {
    success: kvInitResult,
    connected: isKVConnected(),
    details: getKVDiagnostics()
  };
