export const runtime = "edge";

import { NextResponse } from "next/server";

// –ë—ã—Å—Ç—Ä—ã–π –∏–º–ø–æ—Ä—Ç —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
async function quickImport(moduleName) {
  try {
    return await import(moduleName);
  } catch (error) {
    console.error(`[IMPORT ERROR] ${moduleName}:`, error.message);
    throw new Error(`–ú–æ–¥—É–ª—å ${moduleName} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω`);
  }
}

// GET - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞–≤—ã–∫–æ–≤ –¥–ª—è –æ—Ü–µ–Ω–∫–∏
export async function GET(req, { params }) {
  const startTime = Date.now();
  console.log('[FORM API] üöÄ –ù–∞—á–∞–ª–æ –±—ã—Å—Ç—Ä–æ–π –∑–∞–≥—Ä—É–∑–∫–∏');
  
  try {
    const { token } = params;
    if (!token) {
      return NextResponse.json({ error: "–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω" }, { status: 400 });
    }

    // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π
    const [tokenModule, notionModule] = await Promise.all([
      quickImport("@/lib/token"),
      quickImport("@/lib/notion")
    ]);

    const { verifyReviewToken } = tokenModule;
    const { 
      listEvaluateesForReviewerUser, 
      fetchOptimizedSkillsForReviewer,
      getReviewerInfo
    } = notionModule;
 
    // –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
    console.log('[FORM API] ‚è±Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞...');
    const payload = await verifyReviewToken(token);
    const { reviewerUserId, role } = payload;

    console.log(`[FORM API] ‚úÖ –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω. –†–µ–≤—å—é–µ—Ä: ${reviewerUserId}, —Ä–æ–ª—å: ${role}`);

    // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–≤—å—é–µ—Ä–µ –∏ —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    console.log('[FORM API] ‚è±Ô∏è –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...');
    const [reviewerInfo, employees] = await Promise.all([
      getReviewerInfo(reviewerUserId).catch(err => {
        console.warn('[FORM API] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–≤—å—é–µ—Ä–µ:', err.message);
        return { name: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${reviewerUserId.substring(0, 8)}`, userId: reviewerUserId };
      }),
      listEvaluateesForReviewerUser(reviewerUserId)
    ]);

    console.log(`[FORM API] ‚úÖ –ù–∞–π–¥–µ–Ω–æ ${employees.length} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è –æ—Ü–µ–Ω–∫–∏`);
    console.log(`[FORM API] ‚úÖ –†–µ–≤—å—é–µ—Ä: ${reviewerInfo.name}`);

    if (!employees.length) {
      return NextResponse.json({
        error: "–ù–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è –æ—Ü–µ–Ω–∫–∏",
        reviewerInfo,
        suggestion: "–í–æ–∑–º–æ–∂–Ω–æ, –≤–∞–º –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∑–∞–¥–∞—á–∏ –ø–æ –æ—Ü–µ–Ω–∫–µ –≤ –º–∞—Ç—Ä–∏—Ü–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π"
      }, { status: 404 });
    }

    // –ë—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞–≤—ã–∫–æ–≤ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
    console.log('[FORM API] ‚è±Ô∏è –ë—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞–≤—ã–∫–æ–≤...');
    const skillRows = await fetchOptimizedSkillsForReviewer(employees, reviewerUserId, role);
    
    const loadTime = Date.now() - startTime;
    console.log(`[FORM API] üéâ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ ${loadTime}ms`);

    const response = {
      success: true,
      data: {
        rows: skillRows,
        reviewerInfo: {
          name: reviewerInfo.name,
          userId: reviewerInfo.userId,
          role: role || 'peer'
        },
        stats: {
          totalEmployees: employees.length,
          totalSkills: skillRows.length,
          loadTimeMs: loadTime,
          employees: employees.map(e => ({ 
            name: e.employeeName, 
            role: e.role 
          }))
        }
      }
    };

    if (skillRows.length === 0) {
      response.warning = "–ù–∞–≤—ã–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞—Ç—Ä–∏—Ü—ã –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π.";
    }

    return NextResponse.json(response);

  } catch (error) {
    const loadTime = Date.now() - startTime;
    console.error('[FORM API] ‚ùå –û—à–∏–±–∫–∞:', error.message, `(${loadTime}ms)`);
    
    let errorMessage = "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞";
    let statusCode = 500;
    
    if (error.message?.includes('JWT') || error.message?.includes('—Ç–æ–∫–µ–Ω')) {
      errorMessage = "–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∏–ª–∏ –∏—Å—Ç—ë–∫—à–∏–π —Ç–æ–∫–µ–Ω";
      statusCode = 401;
    } else if (error.message?.includes('–º–æ–¥—É–ª—å')) {
      errorMessage = "–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞";
    } else if (error.message?.includes('429')) {
      errorMessage = "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.";
      statusCode = 429;
    }

    return NextResponse.json({
      error: errorMessage,
      loadTimeMs: loadTime,
      details: process.env.NODE_ENV === 'development' ? error.message : undefined
    }, { status: statusCode });
  }
}

// POST - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫
export async function POST(req, { params }) {
  try {
    const { token } = params;
    
    // –ë—ã—Å—Ç—Ä—ã–π –∏–º–ø–æ—Ä—Ç
    const [tokenModule, notionModule] = await Promise.all([
      quickImport("@/lib/token"),
      quickImport("@/lib/notion")
    ]);

    const { verifyReviewToken } = tokenModule;
    const { batchUpdateScores, ROLE_TO_FIELD } = notionModule;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
    const payload = await verifyReviewToken(token);
    const { reviewerUserId, role } = payload;

    // –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö
    const body = await req.json();
    
    if (!body.items || !Array.isArray(body.items)) {
      return NextResponse.json(
        { error: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –º–∞—Å—Å–∏–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤" }, 
        { status: 400 }
      );
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    for (const [index, item] of body.items.entries()) {
      if (!item.pageId || typeof item.value !== 'number' || item.value < 0 || item.value > 5) {
        return NextResponse.json(
          { error: `–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç ${index + 1}` }, 
          { status: 400 }
        );
      }
    }

    const scoreField = ROLE_TO_FIELD[role] || ROLE_TO_FIELD.peer;
    
    console.log(`[FORM POST] –ü–∞–∫–µ—Ç–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ${body.items.length} –æ—Ü–µ–Ω–æ–∫ (–ø–æ–ª–µ: ${scoreField})`);
    
    // –ü–∞–∫–µ—Ç–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    const result = await batchUpdateScores(body.items, scoreField);
    
    return NextResponse.json({
      success: true,
      updated: result.successful,
      failed: result.failed,
      totalItems: body.items.length,
      mode: body.mode || "final"
    });

  } catch (error) {
    console.error('[FORM POST] –û—à–∏–±–∫–∞:', error.message);
    
    if (error.message?.includes('JWT')) {
      return NextResponse.json({ error: "–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω" }, { status: 401 });
    }
    
    return NextResponse.json(
      { error: "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö" }, 
      { status: 500 }
    );
  }
}