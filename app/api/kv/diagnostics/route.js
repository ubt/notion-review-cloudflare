// app/api/kv/diagnostics/route.js - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º
export const runtime = "edge";

import { NextResponse } from "next/server";
import { initKV, isKVConnected, getKVDiagnostics } from "@/lib/kv-queue";

export async function GET(req, context) {
  console.log('[KV DIAGNOSTICS] üîç –£–ì–õ–£–ë–õ–ï–ù–ù–ê–Ø –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Cloudflare KV –¥–ª—è Pages');
  
  const diagnostics = {
    timestamp: new Date().toISOString(),
    runtime: "edge",
    platform: "Cloudflare Pages",
    url: req.url
  };

  // 1. –î–ï–¢–ê–õ–¨–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ context
  diagnostics.context = {
    provided: !!context,
    type: typeof context,
    isNull: context === null,
    isUndefined: context === undefined,
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ context
    hasEnv: !!context?.env,
    hasBindings: !!context?.bindings,
    hasCloudflare: !!context?.cloudflare,
    hasWaitUntil: !!context?.waitUntil,
    hasParams: !!context?.params,
    
    // –ö–ª—é—á–∏ –æ–±—ä–µ–∫—Ç–æ–≤
    contextKeys: context ? Object.keys(context) : [],
    envKeys: context?.env ? Object.keys(context.env) : [],
    bindingsKeys: context?.bindings ? Object.keys(context.bindings) : [],
    
    // –°–ü–ï–¶–ò–§–ò–ß–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ KV –≤ context
    contextEnvKV: !!context?.env?.NOTION_QUEUE_KV,
    contextEnvKVType: context?.env?.NOTION_QUEUE_KV ? typeof context.env.NOTION_QUEUE_KV : 'undefined',
    contextBindingsKV: !!context?.bindings?.NOTION_QUEUE_KV,
    contextDirectKV: !!context?.NOTION_QUEUE_KV,
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è KV –≤ env
    envKVVariations: context?.env ? Object.keys(context.env).filter(key => 
      key.includes('KV') || key.includes('NOTION') || key.includes('QUEUE')
    ) : [],
    
    // –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è context –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–æ–±—Ä–µ–∑–∞–Ω–Ω–∞—è)
    contextSample: context ? {
      keys: Object.keys(context),
      envSample: context.env ? Object.keys(context.env).slice(0, 10) : null,
      hasEnvNotionKV: !!context.env?.NOTION_QUEUE_KV
    } : null
  };

  // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
  diagnostics.globalVariables = {
    NOTION_QUEUE_KV_exists: typeof NOTION_QUEUE_KV !== 'undefined',
    NOTION_QUEUE_KV_truthy: typeof NOTION_QUEUE_KV !== 'undefined' && !!NOTION_QUEUE_KV,
    NOTION_QUEUE_KV_type: typeof NOTION_QUEUE_KV !== 'undefined' ? typeof NOTION_QUEUE_KV : 'undefined',
    globalThis_exists: typeof globalThis !== 'undefined',
    globalThis_NOTION_QUEUE_KV: typeof globalThis !== 'undefined' && !!globalThis.NOTION_QUEUE_KV
  };

  // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
  diagnostics.environment = {
    NODE_ENV: process.env.NODE_ENV || 'unknown',
    hasNotionToken: !!process.env.NOTION_TOKEN,
    hasJWTSecret: !!process.env.JWT_SECRET,
    hasMatrixDbId: !!process.env.MATRIX_DB_ID,
    processEnvKeys: Object.keys(process.env).filter(key => 
      key.includes('NOTION') || key.includes('KV') || key.includes('JWT')
    )
  };

  // 4. –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–ï –ø–æ–ø—ã—Ç–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ KV —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  console.log('[KV DIAGNOSTICS] üîß –ü–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ KV –ë–ï–ó context...');
  const kvInitWithoutContext = initKV();
  
  console.log('[KV DIAGNOSTICS] üîß –ü–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ KV –° context...');
  const kvInitWithContext = initKV(context);
  
  // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –∏–∑ KV –º–æ–¥—É–ª—è
  const kvDiagnostics = getKVDiagnostics();
  
  diagnostics.kvInitialization = {
    withoutContext: {
      success: kvInitWithoutContext,
      connected: isKVConnected()
    },
    withContext: {
      success: kvInitWithContext,
      connected: isKVConnected()
    },
    details: kvDiagnostics,
    finalStatus: {
      connected: isKVConnected(),
      hasNamespace: kvDiagnostics.hasNamespace,
      initAttempts: kvDiagnostics.initAttempts
    }
  };

  // 5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ KV –æ–ø–µ—Ä–∞—Ü–∏–π (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
  if (isKVConnected()) {
    console.log('[KV DIAGNOSTICS] üß™ KV –¥–æ—Å—Ç—É–ø–Ω–æ, –ø—Ä–æ–≤–æ–¥–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...');
    try {
      const testKey = `diagnostic_test_${Date.now()}_${Math.random().toString(36).substr(2, 5)}`;
      const testValue = JSON.stringify({
        test: 'diagnostic_value', 
        timestamp: Date.now(),
        random: Math.random()
      });
      
      console.log(`[KV DIAGNOSTICS] ‚úçÔ∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º PUT: ${testKey}`);
      
      // –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏
      await context?.env?.NOTION_QUEUE_KV?.put(testKey, testValue, { expirationTtl: 60 }) ||
            NOTION_QUEUE_KV?.put(testKey, testValue, { expirationTtl: 60 });
      
      console.log(`[KV DIAGNOSTICS] üìñ –¢–µ—Å—Ç–∏—Ä—É–µ–º GET: ${testKey}`);
      
      // –¢–µ—Å—Ç —á—Ç–µ–Ω–∏—è
      const retrievedValue = await context?.env?.NOTION_QUEUE_KV?.get(testKey) ||
                            NOTION_QUEUE_KV?.get(testKey);
      
      console.log(`[KV DIAGNOSTICS] üóëÔ∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º DELETE: ${testKey}`);
      
      // –¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è
      await context?.env?.NOTION_QUEUE_KV?.delete(testKey) ||
            NOTION_QUEUE_KV?.delete(testKey);
      
      const testSuccess = retrievedValue === testValue;
      
      diagnostics.kvOperations = {
        put: true,
        get: testSuccess,
        delete: true,
        overall: testSuccess,
        testKey: testKey,
        expectedValue: testValue,
        retrievedValue: retrievedValue,
        valuesMatch: retrievedValue === testValue
      };
      
    } catch (kvError) {
      console.error('[KV DIAGNOSTICS] ‚ùå –û—à–∏–±–∫–∞ KV –æ–ø–µ—Ä–∞—Ü–∏–π:', kvError);
      diagnostics.kvOperations = {
        put: false,
        get: false,
        delete: false,
        overall: false,
        error: kvError.message,
        stack: kvError.stack
      };
    }
  } else {
    diagnostics.kvOperations = {
      put: false,
      get: false,
      delete: false,
      overall: false,
      reason: 'KV –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
      kvConnected: isKVConnected(),
      kvDiagnostics: kvDiagnostics
    };
  }

  // 6. –î–ï–¢–ê–õ–¨–ù–´–ô –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º –¥–ª—è Pages
  const issues = [];
  const recommendations = [];

  // –ê–Ω–∞–ª–∏–∑ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –ø—Ä–æ–±–ª–µ–º
  if (!diagnostics.context.provided) {
    issues.push('üö® –ö–†–ò–¢–ò–ß–ù–û: Context –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ API route');
    recommendations.push('‚ùó –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ context –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤–æ –≤—Å–µ API endpoints');
    recommendations.push('üìù –ü—Ä–∏–º–µ—Ä: export async function GET(req, context) { ... }');
  } else if (!diagnostics.context.hasEnv) {
    issues.push('üö® –ö–†–ò–¢–ò–ß–ù–û: Context –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω, –Ω–æ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç env –æ–±—ä–µ–∫—Ç');
    recommendations.push('‚ùó –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ context.env –¥–æ—Å—Ç—É–ø–µ–Ω');
    recommendations.push('üîç Context –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å: { env: { NOTION_QUEUE_KV: ... } }');
  } else if (!diagnostics.context.contextEnvKV) {
    issues.push('üö® –ö–†–ò–¢–ò–ß–ù–û: NOTION_QUEUE_KV –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ context.env');
    recommendations.push('‚ùó –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ KV binding –≤ Cloudflare Pages Dashboard');
    recommendations.push('üîß Pages ‚Üí Settings ‚Üí Functions ‚Üí KV namespace bindings');
    recommendations.push('üìù Variable name –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å: NOTION_QUEUE_KV');
    recommendations.push('üîÑ –ü–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ø–µ—Ä–µ—Ä–∞–∑–≤–µ—Ä–Ω–∏—Ç–µ: npm run cf:deploy');
  } else if (!diagnostics.kvInitialization.withContext.success) {
    issues.push('‚ö†Ô∏è KV –Ω–∞–π–¥–µ–Ω –≤ context, –Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ—É–¥–∞—á–Ω–∞');
    recommendations.push('üîÑ –ü–µ—Ä–µ—Ä–∞–∑–≤–µ—Ä–Ω–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: npm run cf:deploy');
    recommendations.push('üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫');
  } else if (!diagnostics.kvOperations.overall) {
    issues.push('‚ö†Ô∏è KV –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –Ω–æ –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç');
    recommendations.push('üìä –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å KV namespace –≤ Cloudflare Dashboard');
    recommendations.push('üîß –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ KV namespace –Ω–µ –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω');
    recommendations.push('üíæ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π KV namespace');
  }

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
  if (diagnostics.context.envKVVariations.length > 0 && !diagnostics.context.contextEnvKV) {
    issues.push(`üîç –í context.env –Ω–∞–π–¥–µ–Ω—ã KV-–ø–æ–¥–æ–±–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: ${diagnostics.context.envKVVariations.join(', ')}`);
    recommendations.push('üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è KV binding (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å NOTION_QUEUE_KV)');
  }

  if (diagnostics.kvInitialization.details.initAttempts > 3) {
    issues.push(`‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ${diagnostics.kvInitialization.details.initAttempts}`);
    recommendations.push('üîÑ –û—á–∏—Å—Ç–∏—Ç–µ –∫—ç—à –∏ –ø–µ—Ä–µ—Ä–∞–∑–≤–µ—Ä–Ω–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ');
  }

  if (issues.length === 0) {
    issues.push('‚úÖ –ü—Ä–æ–±–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    recommendations.push('üéâ Cloudflare KV –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
  }

  diagnostics.analysis = {
    issues,
    recommendations,
    status: issues.length === 1 && issues[0] === '‚úÖ –ü—Ä–æ–±–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' ? 'healthy' : 'issues_found',
    priority: issues.length > 0 && issues[0].includes('–ö–†–ò–¢–ò–ß–ù–û') ? 'critical' : 'normal'
  };

  // 7. –°–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –¥–ª—è —ç—Ç–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏
  diagnostics.troubleshooting = {
    currentSituation: "KV binding –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ Dashboard, –Ω–æ –∫–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø",
    mostLikelyIssue: !diagnostics.context.provided ? "Context –Ω–µ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è" :
                     !diagnostics.context.hasEnv ? "Context.env –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω" :
                     !diagnostics.context.contextEnvKV ? "–ù—É–∂–Ω–æ –ø–µ—Ä–µ—Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ" :
                     "–ü—Ä–æ–±–ª–µ–º–∞ —Å KV namespace",
    
    immediateActions: [
      "1. üîÑ –ü–µ—Ä–µ—Ä–∞–∑–≤–µ—Ä–Ω–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: npm run cf:deploy",
      "2. ‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 2-3 –º–∏–Ω—É—Ç—ã –ø–æ—Å–ª–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è", 
      "3. üîç –û–±–Ω–æ–≤–∏—Ç–µ —ç—Ç—É —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏",
      "4. üìã –ï—Å–ª–∏ –Ω–µ –ø–æ–º–æ–≥–ª–æ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"
    ],
    
    verificationSteps: [
      "‚úÖ KV binding –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ Dashboard: " + (diagnostics.context.contextEnvKV ? "–î–ê" : "–ù–ï–¢"),
      "‚úÖ Context –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤ API: " + (diagnostics.context.provided ? "–î–ê" : "–ù–ï–¢"), 
      "‚úÖ Context.env –¥–æ—Å—Ç—É–ø–µ–Ω: " + (diagnostics.context.hasEnv ? "–î–ê" : "–ù–ï–¢"),
      "‚úÖ NOTION_QUEUE_KV –≤ context.env: " + (diagnostics.context.contextEnvKV ? "–î–ê" : "–ù–ï–¢"),
      "‚úÖ KV –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç: " + (diagnostics.kvOperations.overall ? "–î–ê" : "–ù–ï–¢")
    ],
    
    nextSteps: diagnostics.kvOperations.overall ? 
      ["üéâ –í—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç! –ú–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å KV –¥–ª—è –±–æ–ª—å—à–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"] :
      [
        "üîÑ –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ —á—Ç–æ –∏–∑–º–µ–Ω–∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ - –ø–µ—Ä–µ—Ä–∞–∑–≤–µ—Ä–Ω–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
        "‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è",
        "üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤ Cloudflare Dashboard ‚Üí Pages ‚Üí Functions",
        "üìû –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –æ—Å—Ç–∞–µ—Ç—Å—è - –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É Cloudflare"
      ]
  };

  // 8. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
  const statusCode = diagnostics.analysis.status === 'healthy' ? 200 : 503;

  console.log(`[KV DIAGNOSTICS] üìä –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°—Ç–∞—Ç—É—Å: ${diagnostics.analysis.status}`);
  
  return NextResponse.json(diagnostics, { status: statusCode });
}

// POST endpoint –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
export async function POST(req, context) {
  try {
    const body = await req.json();
    
    if (body.action === 'force_test') {
      console.log('[KV DIAGNOSTICS] üß™ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ KV...');
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å context
      const kvInitResult = initKV(context);
      
      const testResults = {
        initWithContext: kvInitResult,
        kvConnected: isKVConnected(),
        contextProvided: !!context,
        contextHasEnv: !!context?.env,
        contextHasKV: !!context?.env?.NOTION_QUEUE_KV,
        kvDiagnostics: getKVDiagnostics()
      };
      
      if (!isKVConnected()) {
        return NextResponse.json({
          success: false,
          message: "‚ùå KV –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
          testResults,
          recommendations: [
            "üîÑ –ü–µ—Ä–µ—Ä–∞–∑–≤–µ—Ä–Ω–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: npm run cf:deploy",
            "‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 2-3 –º–∏–Ω—É—Ç—ã",
            "üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ KV binding –≤ Dashboard"
          ]
        }, { status: 503 });
      }
      
      // –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
      try {
        const testData = Array.from({ length: 3 }, (_, i) => ({
          key: `force_test_${Date.now()}_${i}`,
          value: JSON.stringify({ test: `force_value_${i}`, timestamp: Date.now() })
        }));
        
        // –ó–∞–ø–∏—Å—å
        for (const { key, value } of testData) {
          await context?.env?.NOTION_QUEUE_KV?.put(key, value, { expirationTtl: 60 }) ||
                NOTION_QUEUE_KV?.put(key, value, { expirationTtl: 60 });
        }
        testResults.bulkPut = true;
        
        // –ß—Ç–µ–Ω–∏–µ
        for (const { key, value } of testData) {
          const retrieved = await context?.env?.NOTION_QUEUE_KV?.get(key) ||
                           NOTION_QUEUE_KV?.get(key);
          if (retrieved !== value) {
            throw new Error(`Mismatch for key ${key}: expected ${value}, got ${retrieved}`);
          }
        }
        testResults.bulkGet = true;
        
        // –û—á–∏—Å—Ç–∫–∞
        for (const { key } of testData) {
          await context?.env?.NOTION_QUEUE_KV?.delete(key) ||
                NOTION_QUEUE_KV?.delete(key);
        }
        testResults.bulkDelete = true;
        
        testResults.overall = true;
        
      } catch (error) {
        testResults.overall = false;
        testResults.error = error.message;
        testResults.errorStack = error.stack;
      }
      
      return NextResponse.json({
        success: testResults.overall,
        message: testResults.overall ? 
          "‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ KV –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ! üéâ" : 
          "‚ùå –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ KV –Ω–µ—É–¥–∞—á–Ω–æ",
        testResults,
        timestamp: new Date().toISOString()
      });
    }
    
    return NextResponse.json(
      { error: "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ" },
      { status: 400 }
    );
    
  } catch (error) {
    return NextResponse.json(
      { 
        error: "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ POST –∑–∞–ø—Ä–æ—Å–∞",
        details: error.message 
      },
      { status: 500 }
    );
  }
}