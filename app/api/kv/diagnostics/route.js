// app/api/kv/diagnostics/route.js - –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï —Ç–µ—Å—Ç—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ TTL
export const runtime = "edge";

import { NextResponse } from "next/server";
import { getRequestContext } from '@cloudflare/next-on-pages';
import { initKV, isKVConnected, getKVDiagnostics } from "@/lib/kv-queue";

export async function GET(req) {
  console.log('[KV DIAGNOSTICS] üîç –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ Cloudflare KV –¥–ª—è Next.js –Ω–∞ Pages');
  
  const diagnostics = {
    timestamp: new Date().toISOString(),
    runtime: "edge",
    platform: "Cloudflare Pages",
    url: req.url
  };

  // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ getRequestContext
  diagnostics.requestContext = {
    available: false,
    error: null,
    contextKeys: [],
    envKeys: [],
    hasKVBinding: false
  };

  try {
    const { env } = getRequestContext();
    diagnostics.requestContext = {
      available: true,
      error: null,
      contextKeys: Object.keys(getRequestContext()),
      envKeys: Object.keys(env || {}),
      hasKVBinding: !!env.NOTION_QUEUE_KV,
      kvType: env.NOTION_QUEUE_KV ? typeof env.NOTION_QUEUE_KV : 'undefined'
    };
    
    console.log('[KV DIAGNOSTICS] ‚úÖ getRequestContext() —Ä–∞–±–æ—Ç–∞–µ—Ç');
  } catch (error) {
    diagnostics.requestContext.error = error.message;
    console.error('[KV DIAGNOSTICS] ‚ùå getRequestContext() –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
  }

  // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
  diagnostics.environment = {
    NODE_ENV: process.env.NODE_ENV || 'unknown',
    hasNotionToken: !!process.env.NOTION_TOKEN,
    hasJWTSecret: !!process.env.JWT_SECRET,
    hasMatrixDbId: !!process.env.MATRIX_DB_ID,
    hasEmployeesDbId: !!process.env.EMPLOYEES_DB_ID
  };

  // 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ KV
  console.log('[KV DIAGNOSTICS] üîß –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é KV...');
  
  const kvInitResult = initKV();
  const kvDiagnosticsData = getKVDiagnostics();
  
  diagnostics.kvInitialization = {
    success: kvInitResult,
    details: kvDiagnosticsData
  };

  // 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ KV
  diagnostics.kvConnection = {
    connected: false,
    error: null,
    testResults: null
  };

  if (diagnostics.requestContext.hasKVBinding) {
    try {
      console.log('[KV DIAGNOSTICS] üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ KV...');
      
      const connected = await isKVConnected();
      diagnostics.kvConnection.connected = connected;
      
      if (connected) {
        // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ KV –æ–ø–µ—Ä–∞—Ü–∏–π
        const testResults = await performKVTests();
        diagnostics.kvConnection.testResults = testResults;
        console.log('[KV DIAGNOSTICS] ‚úÖ KV —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
      } else {
        diagnostics.kvConnection.error = 'KV connection test failed';
        console.warn('[KV DIAGNOSTICS] ‚ö†Ô∏è KV –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ—É–¥–∞—á–Ω–æ');
      }
    } catch (error) {
      diagnostics.kvConnection.error = error.message;
      console.error('[KV DIAGNOSTICS] ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è KV:', error.message);
    }
  } else {
    diagnostics.kvConnection.error = 'KV binding not found in environment';
    console.warn('[KV DIAGNOSTICS] ‚ö†Ô∏è KV binding –Ω–µ –Ω–∞–π–¥–µ–Ω');
  }

  // 5. –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  const analysis = analyzeKVIssues(diagnostics);
  diagnostics.analysis = analysis;

  // 6. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–≤–µ—Ç–∞
  const isHealthy = diagnostics.kvConnection.connected && diagnostics.requestContext.available;
  const statusCode = isHealthy ? 200 : 503;

  console.log(`[KV DIAGNOSTICS] üìä –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°—Ç–∞—Ç—É—Å: ${isHealthy ? 'healthy' : 'issues'}`);
  
  return NextResponse.json(diagnostics, { status: statusCode });
}

// –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ KV –æ–ø–µ—Ä–∞—Ü–∏–π
async function performKVTests() {
  const { env } = getRequestContext();
  const kv = env.NOTION_QUEUE_KV;
  
  const testResults = {
    basicOperations: false,
    concurrentOperations: false,
    largeValueHandling: false,
    ttlSupport: false,
    listOperations: false,
    errors: []
  };

  try {
    // –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (PUT, GET, DELETE)
    console.log('[KV TEST] –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏...');
    const testKey = `diagnostic_test_${Date.now()}`;
    const testValue = JSON.stringify({ test: true, timestamp: Date.now() });
    
    await kv.put(testKey, testValue);
    const retrieved = await kv.get(testKey);
    await kv.delete(testKey);
    
    testResults.basicOperations = retrieved === testValue;
    console.log(`[KV TEST] –ë–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: ${testResults.basicOperations ? '‚úÖ' : '‚ùå'}`);

    // –¢–µ—Å—Ç 2: –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø TTL –ø–æ–¥–¥–µ—Ä–∂–∫–∞ (–º–∏–Ω–∏–º—É–º 60 —Å–µ–∫—É–Ω–¥)
    console.log('[KV TEST] –¢–µ—Å—Ç–∏—Ä—É–µ–º TTL...');
    const ttlKey = `ttl_test_${Date.now()}`;
    
    try {
      await kv.put(ttlKey, 'ttl_test', { expirationTtl: 60 }); // –ò–°–ü–†–ê–í–õ–ï–ù–û: –º–∏–Ω–∏–º—É–º 60 —Å–µ–∫—É–Ω–¥
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ä–∞–∑—É –¥–æ—Å—Ç—É–ø–Ω–æ
      const ttlValue = await kv.get(ttlKey);
      testResults.ttlSupport = ttlValue === 'ttl_test';
      
      // –û—á–∏—â–∞–µ–º —Å—Ä–∞–∑—É, –Ω–µ –∂–¥–µ–º –∏—Å—Ç–µ—á–µ–Ω–∏—è
      await kv.delete(ttlKey);
      
      console.log(`[KV TEST] TTL –ø–æ–¥–¥–µ—Ä–∂–∫–∞: ${testResults.ttlSupport ? '‚úÖ' : '‚ùå'}`);
    } catch (ttlError) {
      testResults.errors.push(`TTL error: ${ttlError.message}`);
      testResults.ttlSupport = false;
      console.warn(`[KV TEST] TTL –ø–æ–¥–¥–µ—Ä–∂–∫–∞: ‚ùå - ${ttlError.message}`);
    }

    // –¢–µ—Å—Ç 3: –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
    console.log('[KV TEST] –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏...');
    try {
      const concurrentData = Array.from({ length: 3 }, (_, i) => ({
        key: `concurrent_${Date.now()}_${i}`,
        value: `value_${i}`
      }));
      
      // –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è rate limits
      for (const { key, value } of concurrentData) {
        await kv.put(key, value);
        await new Promise(resolve => setTimeout(resolve, 100)); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–µ–Ω–∏–µ
      let allRead = true;
      for (const { key, value } of concurrentData) {
        const retrieved = await kv.get(key);
        if (retrieved !== value) {
          allRead = false;
          break;
        }
        await new Promise(resolve => setTimeout(resolve, 50));
      }
      
      // –û—á–∏—â–∞–µ–º
      for (const { key } of concurrentData) {
        await kv.delete(key);
        await new Promise(resolve => setTimeout(resolve, 50));
      }
      
      testResults.concurrentOperations = allRead;
      console.log(`[KV TEST] –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: ${testResults.concurrentOperations ? '‚úÖ' : '‚ùå'}`);
      
    } catch (concurrentError) {
      testResults.errors.push(`Concurrent operations error: ${concurrentError.message}`);
      testResults.concurrentOperations = false;
      console.warn(`[KV TEST] –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: ‚ùå - ${concurrentError.message}`);
    }

    // –¢–µ—Å—Ç 4: –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ–ª—å—à–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π (–º–µ–Ω—å—à–∏–π —Ä–∞–∑–º–µ—Ä)
    console.log('[KV TEST] –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–æ–ª—å—à–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è...');
    try {
      const largeKey = `large_test_${Date.now()}`;
      const largeValue = JSON.stringify({
        data: Array.from({ length: 50 }, (_, i) => `item_${i}_${'x'.repeat(20)}`) // –£–º–µ–Ω—å—à–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä
      });
      
      await kv.put(largeKey, largeValue);
      const largeRetrieved = await kv.get(largeKey);
      testResults.largeValueHandling = largeRetrieved === largeValue;
      await kv.delete(largeKey);
      console.log(`[KV TEST] –ë–æ–ª—å—à–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è: ${testResults.largeValueHandling ? '‚úÖ' : '‚ùå'}`);
      
    } catch (largeError) {
      testResults.errors.push(`Large value error: ${largeError.message}`);
      testResults.largeValueHandling = false;
      console.warn(`[KV TEST] –ë–æ–ª—å—à–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è: ‚ùå - ${largeError.message}`);
    }

    // –¢–µ—Å—Ç 5: –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï list –æ–ø–µ—Ä–∞—Ü–∏–∏
    console.log('[KV TEST] –¢–µ—Å—Ç–∏—Ä—É–µ–º list –æ–ø–µ—Ä–∞—Ü–∏–∏...');
    try {
      // –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏
      const listTestKey = `list_test_${Date.now()}`;
      await kv.put(listTestKey, 'list_test_value');
      
      const listResult = await kv.list({ prefix: 'list_test_', limit: 10 });
      testResults.listOperations = listResult && Array.isArray(listResult.keys) && listResult.keys.length > 0;
      
      // –û—á–∏—â–∞–µ–º
      await kv.delete(listTestKey);
      
      console.log(`[KV TEST] List –æ–ø–µ—Ä–∞—Ü–∏–∏: ${testResults.listOperations ? '‚úÖ' : '‚ùå'}`);
    } catch (listError) {
      testResults.listOperations = false;
      testResults.errors.push(`List error: ${listError.message}`);
      console.warn(`[KV TEST] List –æ–ø–µ—Ä–∞—Ü–∏–∏: ‚ùå - ${listError.message}`);
    }

  } catch (error) {
    testResults.errors.push(error.message);
    console.error('[KV TEST] –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
  }

  return testResults;
}

// –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
function analyzeKVIssues(diagnostics) {
  const issues = [];
  const recommendations = [];
  const status = diagnostics.kvConnection.connected ? 'healthy' : 'issues';

  // –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º
  if (!diagnostics.requestContext.available) {
    issues.push('üö® –ö–†–ò–¢–ò–ß–ù–û: getRequestContext() –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    recommendations.push('‚ùó –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ @cloudflare/next-on-pages');
    recommendations.push('üìù –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –≤—Å–µ API routes –∏–º–µ—é—Ç export const runtime = "edge"');
  } 
  else if (!diagnostics.requestContext.hasKVBinding) {
    issues.push('üö® –ö–†–ò–¢–ò–ß–ù–û: KV binding NOTION_QUEUE_KV –Ω–µ –Ω–∞–π–¥–µ–Ω');
    recommendations.push('‚ùó –°–æ–∑–¥–∞–π—Ç–µ KV namespace: npx wrangler kv namespace create "NOTION_QUEUE_KV"');
    recommendations.push('üìù –î–æ–±–∞–≤—å—Ç–µ binding –≤ wrangler.toml');
    recommendations.push('üîÑ –ü–µ—Ä–µ—Ä–∞–∑–≤–µ—Ä–Ω–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: npm run cf:deploy');
  } 
  else if (!diagnostics.kvConnection.connected) {
    issues.push('‚ö†Ô∏è KV binding –Ω–∞–π–¥–µ–Ω, –Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ—É–¥–∞—á–Ω–æ');
    recommendations.push('üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ namespace ID –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤ wrangler.toml');
    recommendations.push('‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è');
    recommendations.push('üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –Ω–∞ –æ—à–∏–±–∫–∏');
  }

  // –ê–Ω–∞–ª–∏–∑ —Ç–µ—Å—Ç–æ–≤
  if (diagnostics.kvConnection.testResults) {
    const tests = diagnostics.kvConnection.testResults;
    
    if (!tests.basicOperations) {
      issues.push('‚ùå –ë–∞–∑–æ–≤—ã–µ KV –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç');
      recommendations.push('üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ KV namespace');
    }
    
    if (!tests.ttlSupport) {
      issues.push('‚ö†Ô∏è TTL –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      recommendations.push('üìã Cloudflare KV —Ç—Ä–µ–±—É–µ—Ç –º–∏–Ω–∏–º—É–º 60 —Å–µ–∫—É–Ω–¥ –¥–ª—è TTL');
      recommendations.push('üîß –û–±–Ω–æ–≤–∏—Ç–µ –∫–æ–¥ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è TTL >= 60');
    }
    
    if (!tests.concurrentOperations) {
      issues.push('‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏');
      recommendations.push('üîÑ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ sequential –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏');
      recommendations.push('‚è±Ô∏è –î–æ–±–∞–≤—å—Ç–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ –¥–ª—è rate limiting');
    }
    
    if (!tests.largeValueHandling) {
      issues.push('‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –±–æ–ª—å—à–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏');
      recommendations.push('üì¶ –û–≥—Ä–∞–Ω–∏—á—å—Ç–µ —Ä–∞–∑–º–µ—Ä batch –æ–ø–µ—Ä–∞—Ü–∏–π –¥–æ 25KB');
      recommendations.push('üóúÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∂–∞—Ç–∏–µ –¥–ª—è –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö');
    }
    
    if (!tests.listOperations) {
      issues.push('‚ö†Ô∏è List –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç');
      recommendations.push('üìã List –æ–ø–µ—Ä–∞—Ü–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø–ª–∞–Ω–∞—Ö');
      recommendations.push('üîß –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –ø–æ –∫–ª—é—á–∞–º –≤–º–µ—Å—Ç–æ list');
    }
  }

  // –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  if (issues.length === 0) {
    recommendations.push('üéâ KV –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
    recommendations.push('üöÄ –ì–æ—Ç–æ–≤–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–æ–ª—å—à–∏—Ö batch –æ–ø–µ—Ä–∞—Ü–∏–π');
  } else if (diagnostics.kvConnection.connected && tests.basicOperations) {
    recommendations.push('‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ KV —Ä–∞–±–æ—Ç–∞—é—Ç');
    recommendations.push('üîß –ú–∏–Ω–æ—Ä–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –º–æ–∂–Ω–æ —Ä–µ—à–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏');
    recommendations.push('üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏');
  } else {
    recommendations.push('üìû –ü—Ä–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—â–∏—Ö—Å—è –ø—Ä–æ–±–ª–µ–º–∞—Ö –ø—Ä–æ–≤–µ—Ä—å—Ç–µ Cloudflare Dashboard');
  }

  return {
    status,
    issuesCount: issues.length,
    issues,
    recommendations,
    severity: issues.some(i => i.includes('–ö–†–ò–¢–ò–ß–ù–û')) ? 'critical' : 
              issues.length > 0 ? 'warning' : 'none'
  };
}

// POST endpoint –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
export async function POST(req) {
  try {
    const body = await req.json();
    
    if (body.action === 'force_test') {
      console.log('[KV DIAGNOSTICS] üß™ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ KV...');
      
      try {
        const connected = await isKVConnected();
        
        if (!connected) {
          return NextResponse.json({
            success: false,
            message: "‚ùå KV –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
            recommendations: [
              "üîÑ –ü–µ—Ä–µ—Ä–∞–∑–≤–µ—Ä–Ω–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: npm run cf:deploy",
              "‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 2-3 –º–∏–Ω—É—Ç—ã",
              "üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ KV binding –≤ wrangler.toml"
            ]
          }, { status: 503 });
        }
        
        // –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        const testResults = await performKVTests();
        
        return NextResponse.json({
          success: true,
          message: "‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ KV –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ! üéâ",
          testResults,
          timestamp: new Date().toISOString()
        });
        
      } catch (error) {
        return NextResponse.json({
          success: false,
          message: "‚ùå –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ KV –Ω–µ—É–¥–∞—á–Ω–æ",
          error: error.message,
          timestamp: new Date().toISOString()
        }, { status: 500 });
      }
    }
    
    if (body.action === 'cleanup') {
      console.log('[KV DIAGNOSTICS] üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
      
      try {
        const { env } = getRequestContext();
        const kv = env.NOTION_QUEUE_KV;
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–ª—é—á–µ–π
        const prefixes = ['diagnostic_', 'concurrent_', 'ttl_test_', 'large_test_', 'list_test_'];
        let totalCleaned = 0;
        
        for (const prefix of prefixes) {
          try {
            const testKeys = await kv.list({ prefix });
            
            for (const key of testKeys.keys) {
              await kv.delete(key.name);
              totalCleaned++;
              await new Promise(resolve => setTimeout(resolve, 50)); // Rate limiting
            }
          } catch (prefixError) {
            console.warn(`[KV CLEANUP] –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–µ—Ñ–∏–∫—Å–∞ ${prefix}:`, prefixError.message);
          }
        }
        
        return NextResponse.json({
          success: true,
          message: `üßπ –û—á–∏—â–µ–Ω–æ ${totalCleaned} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π`,
          cleaned: totalCleaned
        });
        
      } catch (error) {
        return NextResponse.json({
          success: false,
          message: "‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
          error: error.message
        }, { status: 500 });
      }
    }
    
    return NextResponse.json(
      { error: "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: force_test, cleanup" },
      { status: 400 }
    );
    
  } catch (error) {
    return NextResponse.json(
      { 
        error: "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ POST –∑–∞–ø—Ä–æ—Å–∞",
        details: error.message 
      },
      { status: 500 }
    );
  }
}