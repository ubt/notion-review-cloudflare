'use client';

import { useState, useEffect, useCallback, useMemo } from 'react';
import ScoreRow from '@/components/ScoreRow';

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∑–∞–≥—Ä—É–∑–∫–∏
const LoadingSpinner = () => (
  <div className="flex items-center justify-center min-h-screen bg-gray-50">
    <div className="text-center">
      <div className="animate-spin rounded-full h-16 w-16 border-b-4 border-blue-600 mx-auto"></div>
      <p className="mt-6 text-gray-700 text-lg">–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ü–µ–Ω–∫–∏...</p>
      <p className="mt-2 text-gray-500 text-sm">–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥</p>
    </div>
  </div>
);

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –æ—à–∏–±–∫–∏
const ErrorDisplay = ({ error, onRetry }) => (
  <div className="flex items-center justify-center min-h-screen bg-gray-50">
    <div className="text-center max-w-lg p-8">
      <div className="text-red-500 text-6xl mb-6">‚ö†Ô∏è</div>
      <h3 className="text-2xl font-semibold text-gray-800 mb-4">
        –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
      </h3>
      <p className="text-gray-600 mb-6 leading-relaxed">{error}</p>
      <button
        onClick={onRetry}
        className="bg-blue-600 hover:bg-blue-700 text-white font-medium px-6 py-3 rounded-lg transition-colors duration-200 shadow-md"
      >
        –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
      </button>
      <p className="mt-4 text-sm text-gray-500">
        –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
      </p>
    </div>
  </div>
);

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø—É—Å—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
const EmptyState = ({ reviewerInfo }) => (
  <div className="flex items-center justify-center min-h-screen bg-gray-50">
    <div className="text-center max-w-lg p-8">
      <div className="text-gray-400 text-6xl mb-6">üìã</div>
      <h3 className="text-2xl font-semibold text-gray-800 mb-4">
        –ù–∞–≤—ã–∫–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
      </h3>
      <p className="text-gray-600 mb-4">
        –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, <strong>{reviewerInfo?.name || '–†–µ–≤—å—é–µ—Ä'}</strong>!
      </p>
      <p className="text-gray-600 leading-relaxed">
        –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –Ω–∞–≤—ã–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ü–µ–Ω–∏—Ç—å. 
        –í–æ–∑–º–æ–∂–Ω–æ, –≤—Å–µ –æ—Ü–µ–Ω–∫–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω—ã –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –µ—â—ë –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.
      </p>
      <div className="mt-6 p-4 bg-blue-50 rounded-lg border border-blue-200">
        <p className="text-sm text-blue-800">
          üí° –ï—Å–ª–∏ –≤—ã –æ–∂–∏–¥–∞–ª–∏ —É–≤–∏–¥–µ—Ç—å –Ω–∞–≤—ã–∫–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–∞—Ç—Ä–∏—Ü—ã –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π.
        </p>
      </div>
    </div>
  </div>
);

// –•—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ —Ñ–æ—Ä–º—ã
function useFormData(token) {
  const [state, setState] = useState({
    data: null,
    loading: true,
    error: null,
    scores: new Map(),
    saving: false
  });

  const loadData = useCallback(async () => {
    setState(prev => ({ ...prev, loading: true, error: null }));
    
    try {
      console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–æ–∫–µ–Ω–∞:', token?.substring(0, 10) + '...');
      
      const response = await fetch(`/api/form/${token}`, {
        method: 'GET',
        headers: { 'Content-Type': 'application/json' }
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({ error: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }));
        throw new Error(errorData.error || `HTTP ${response.status}`);
      }

      const result = await response.json();
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã:', result);

      if (!result.success) {
        throw new Error(result.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ');
      }

      setState(prev => ({
        ...prev,
        data: result.data,
        loading: false,
        error: null
      }));

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
      setState(prev => ({
        ...prev,
        error: error.message,
        loading: false,
        data: null
      }));
    }
  }, [token]);

  const updateScore = useCallback((pageId, data) => {
    setState(prev => {
      const newScores = new Map(prev.scores);
      newScores.set(pageId, data);
      return { ...prev, scores: newScores };
    });
  }, []);

  const saveScores = useCallback(async () => {
    if (state.scores.size === 0) {
      alert('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ü–µ–Ω–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –Ω–∞–≤—ã–∫');
      return;
    }

    setState(prev => ({ ...prev, saving: true }));

    try {
      const items = Array.from(state.scores.entries()).map(([pageId, data]) => ({
        pageId,
        value: data.value
      }));

      console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ü–µ–Ω–∫–∏:', items.length, '—ç–ª–µ–º–µ–Ω—Ç–æ–≤');

      const response = await fetch(`/api/form/${token}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ items, mode: 'final' })
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(errorData.error || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
      }

      const result = await response.json();
      console.log('‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ:', result);

      if (result.success) {
        alert(`‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${result.updated} –æ—Ü–µ–Ω–æ–∫!`);
        // –û—á–∏—â–∞–µ–º –æ—Ü–µ–Ω–∫–∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        setState(prev => ({ ...prev, scores: new Map() }));
      } else {
        throw new Error('–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ—É—Å–ø–µ—à–Ω—ã–π —Å—Ç–∞—Ç—É—Å');
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
      alert(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${error.message}`);
    } finally {
      setState(prev => ({ ...prev, saving: false }));
    }
  }, [state.scores, token]);

  useEffect(() => {
    if (token) {
      loadData();
    }
  }, [token, loadData]);

  return {
    ...state,
    updateScore,
    saveScores,
    retryLoad: loadData
  };
}

// –ì–ª–∞–≤–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
export default function OptimizedSkillAssessmentForm({ params }) {
  const { token } = params;
  const { data, loading, error, scores, saving, updateScore, saveScores, retryLoad } = useFormData(token);

  // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –Ω–∞–≤—ã–∫–æ–≤ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º
  const groupedSkills = useMemo(() => {
    if (!data?.rows) return {};
    
    const groups = {};
    for (const row of data.rows) {
      const key = `${row.employeeId}_${row.employeeName}`;
      if (!groups[key]) {
        groups[key] = {
          employeeName: row.employeeName,
          employeeId: row.employeeId,
          role: row.role,
          skills: []
        };
      }
      groups[key].skills.push(row);
    }
    
    return groups;
  }, [data?.rows]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
  if (loading) {
    return <LoadingSpinner />;
  }

  if (error) {
    return <ErrorDisplay error={error} onRetry={retryLoad} />;
  }

  if (!data?.rows?.length) {
    return <EmptyState reviewerInfo={data?.reviewerInfo} />;
  }

  const reviewerInfo = data.reviewerInfo;
  const stats = data.stats;
  const groupEntries = Object.entries(groupedSkills);

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="max-w-6xl mx-auto px-4 py-8">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–µ–≤—å—é–µ—Ä–µ */}
        <div className="bg-white rounded-xl shadow-lg p-8 mb-8 border border-gray-200">
          <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between">
            <div>
              <h1 className="text-3xl font-bold text-gray-900 mb-2">
                üìã –§–æ—Ä–º–∞ –æ—Ü–µ–Ω–∫–∏ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π
              </h1>
              <p className="text-lg text-gray-600 mb-4">
                –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, <span className="font-semibold text-blue-600">{reviewerInfo?.name || '–†–µ–≤—å—é–µ—Ä'}</span>!
              </p>
              <p className="text-gray-600">
                –û—Ü–µ–Ω–∏—Ç–µ –Ω–∞–≤—ã–∫–∏ –∫–æ–ª–ª–µ–≥ –ø–æ —à–∫–∞–ª–µ –æ—Ç 0 –¥–æ 5, –≥–¥–µ 5 ‚Äî —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
              </p>
            </div>
            
            <div className="mt-6 lg:mt-0 lg:text-right">
              <div className="bg-gradient-to-r from-blue-50 to-indigo-50 rounded-lg p-4 border border-blue-200">
                <div className="text-sm text-gray-600 space-y-1">
                  <div><strong>–í—Å–µ–≥–æ –Ω–∞–≤—ã–∫–æ–≤:</strong> {stats?.totalSkills || 0}</div>
                  <div><strong>–°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:</strong> {stats?.totalEmployees || 0}</div>
                  <div><strong>–û—Ü–µ–Ω–µ–Ω–æ:</strong> {scores.size}</div>
                  <div><strong>–í–∞—à–∞ —Ä–æ–ª—å:</strong> {reviewerInfo?.role || 'peer'}</div>
                </div>
              </div>
            </div>
          </div>

          {/* –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä */}
          <div className="mt-6">
            <div className="flex justify-between text-sm text-gray-600 mb-2">
              <span>–ü—Ä–æ–≥—Ä–µ—Å—Å –æ—Ü–µ–Ω–∫–∏</span>
              <span>{scores.size} –∏–∑ {stats?.totalSkills || 0}</span>
            </div>
            <div className="w-full bg-gray-200 rounded-full h-3">
              <div 
                className="bg-gradient-to-r from-blue-500 to-indigo-600 h-3 rounded-full transition-all duration-300"
                style={{ 
                  width: `${stats?.totalSkills ? (scores.size / stats.totalSkills) * 100 : 0}%` 
                }}
              />
            </div>
          </div>
        </div>

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö */}
        {stats?.employees && stats.employees.length > 0 && (
          <div className="bg-white rounded-lg shadow-sm p-6 mb-8 border border-gray-200">
            <h3 className="text-lg font-semibold text-gray-800 mb-4">
              üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ ({stats.employees.length})
            </h3>
            <div className="flex flex-wrap gap-3">
              {stats.employees.map((emp, index) => (
                <div key={index} className="bg-gray-100 px-3 py-2 rounded-lg text-sm">
                  <strong>{emp.name}</strong> 
                  <span className="text-gray-600 ml-2">({emp.role})</span>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* –°–ø–∏—Å–æ–∫ –Ω–∞–≤—ã–∫–æ–≤ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º */}
        <div className="space-y-8">
          {groupEntries.map(([key, group]) => (
            <div key={key} className="bg-white rounded-xl shadow-lg border border-gray-200 overflow-hidden">
              <div className="bg-gradient-to-r from-gray-50 to-gray-100 px-6 py-4 border-b border-gray-200">
                <h2 className="text-xl font-semibold text-gray-800">
                  üë§ {group.employeeName}
                </h2>
                <p className="text-sm text-gray-600 mt-1">
                  –†–æ–ª—å: {group.role} ‚Ä¢ –ù–∞–≤—ã–∫–æ–≤: {group.skills.length}
                </p>
              </div>
              
              <div className="divide-y divide-gray-200">
                {group.skills.map((skill) => (
                  <ScoreRow
                    key={skill.pageId}
                    item={{
                      pageId: skill.pageId,
                      name: skill.name,
                      description: skill.description,
                      current: skill.current
                    }}
                    onChange={(data) => updateScore(skill.pageId, data)}
                    hideComment={true}
                  />
                ))}
              </div>
            </div>
          ))}
        </div>

        {/* –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è */}
        <div className="mt-8 bg-white rounded-xl shadow-lg p-6 border border-gray-200">
          <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
            <div>
              <p className="text-gray-700 font-medium">
                –ì–æ—Ç–æ–≤—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫–∏?
              </p>
              <p className="text-sm text-gray-600 mt-1">
                –û—Ü–µ–Ω–µ–Ω–æ {scores.size} –∏–∑ {stats?.totalSkills || 0} –Ω–∞–≤—ã–∫–æ–≤
              </p>
            </div>
            
            <button
              onClick={saveScores}
              disabled={saving || scores.size === 0}
              className={`px-8 py-3 rounded-lg font-semibold text-white transition-all duration-200 shadow-md ${
                saving || scores.size === 0
                  ? 'bg-gray-400 cursor-not-allowed'
                  : 'bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 transform hover:scale-105'
              }`}
            >
              {saving ? (
                <span className="flex items-center">
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                  –°–æ—Ö—Ä–∞–Ω—è–µ–º...
                </span>
              ) : (
                `üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫–∏ (${scores.size})`
              )}
            </button>
          </div>
          
          {scores.size === 0 && (
            <p className="text-amber-600 text-sm mt-3 bg-amber-50 p-3 rounded-lg border border-amber-200">
              ‚ö†Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ü–µ–Ω–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –Ω–∞–≤—ã–∫ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
            </p>
          )}
        </div>

        {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        {stats?.loadTimeMs && (
          <div className="mt-6 text-center text-xs text-gray-500">
            –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∑–∞ {stats.loadTimeMs} –º—Å
          </div>
        )}
      </div>
    </div>
  );
}