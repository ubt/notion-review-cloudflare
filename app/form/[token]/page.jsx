'use client';

import { useState, useEffect, useCallback, useMemo } from 'react';
import ScoreRow from '@/components/ScoreRow';

const StateHandler = ({ loading, error, empty, onRetry, children }) => {
  if (loading) {
    return (
      <div style={{
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        minHeight: '100vh',
        backgroundColor: '#f8f9fa'
      }}>
        <div style={{ textAlign: 'center' }}>
          <div className="loading-spinner" style={{
            width: 48,
            height: 48,
            border: '4px solid #e9ecef',
            borderTop: '4px solid #007bff',
            borderRadius: '50%',
            margin: '0 auto 16px'
          }}></div>
          <p style={{ color: '#6c757d', fontSize: 16 }}>–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞–≤—ã–∫–æ–≤ –¥–ª—è –æ—Ü–µ–Ω–∫–∏...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div style={{
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        minHeight: '100vh',
        backgroundColor: '#f8f9fa',
        padding: 24
      }}>
        <div style={{ textAlign: 'center', maxWidth: 600 }}>
          <div style={{ fontSize: 48, marginBottom: 16 }}>‚ö†Ô∏è</div>
          <h3 style={{ 
            fontSize: 24, 
            fontWeight: 600, 
            color: '#dc3545', 
            marginBottom: 16 
          }}>
            –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
          </h3>
          <p style={{ 
            color: '#6c757d', 
            marginBottom: 24,
            lineHeight: 1.5,
            fontSize: 16
          }}>
            {error}
          </p>
          <button
            onClick={onRetry}
            style={{
              backgroundColor: '#007bff',
              color: 'white',
              padding: '12px 24px',
              border: 'none',
              borderRadius: 8,
              fontSize: 16,
              fontWeight: 600,
              cursor: 'pointer',
              transition: 'background-color 0.2s ease'
            }}
          >
            –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
          </button>
        </div>
      </div>
    );
  }

  if (empty) {
    return (
      <div style={{
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        minHeight: '100vh',
        backgroundColor: '#f8f9fa',
        padding: 24
      }}>
        <div style={{ textAlign: 'center', maxWidth: 600 }}>
          <div style={{ fontSize: 48, marginBottom: 16 }}>üìã</div>
          <h3 style={{ 
            fontSize: 24, 
            fontWeight: 600, 
            color: '#6c757d', 
            marginBottom: 16 
          }}>
            –ù–∞–≤—ã–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
          </h3>
          <p style={{ 
            color: '#6c757d',
            lineHeight: 1.5,
            fontSize: 16
          }}>
            –í–æ–∑–º–æ–∂–Ω–æ, –≤–∞–º –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∑–∞–¥–∞—á–∏ –ø–æ –æ—Ü–µ–Ω–∫–µ –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –µ—â—ë –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. 
            –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–∞—Ç—Ä–∏—Ü—ã –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π.
          </p>
        </div>
      </div>
    );
  }

  return children;
};

function useSkillsData(token) {
  const [state, setState] = useState({
    skillGroups: [],
    loading: true,
    error: null,
    scoreData: new Map(),
    stats: null,
    loadTime: 0
  });

  const fetchSkills = useCallback(async () => {
    const start = performance.now();
    setState(prev => ({ ...prev, loading: true, error: null }));
    
    try {
      console.log('–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –Ω–∞–≤—ã–∫–æ–≤ –¥–ª—è —Ç–æ–∫–µ–Ω–∞:', token);
      
      const response = await fetch(`/api/form/${token}`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      console.log('–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status);
      
      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(
          errorData.error || `HTTP ${response.status}: –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞`
        );
      }

      const result = await response.json();
      console.log('–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API:', result);

      if (!result.rows || !Array.isArray(result.rows)) {
        throw new Error('API –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö');
      }

      const grouped = {};
      for (const row of result.rows) {
        const key = `${row.employeeId}_${row.role}`;
        if (!grouped[key]) {
          grouped[key] = {
            employeeId: row.employeeId,
            employeeName: row.employeeName,
            role: row.role,
            items: []
          };
        }
        grouped[key].items.push({
          pageId: row.pageId,
          name: row.name,
          description: row.description,
          current: row.current,
          role: row.role
        });
      }

      const skillGroups = Object.values(grouped);
      console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${skillGroups.length} –≥—Ä—É–ø–ø –Ω–∞–≤—ã–∫–æ–≤`);
      
      setState(prev => ({
        ...prev,
        skillGroups,
        loading: false,
        error: null,
        stats: result.stats,
        loadTime: (performance.now() - start) / 1000
      }));
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞–≤—ã–∫–æ–≤:', error);
      setState(prev => ({ 
        ...prev, 
        error: error.message, 
        loading: false,
        skillGroups: []
      }));
    }
  }, [token]);

  const updateSkillScore = useCallback((pageId, role, value) => {
    setState(prev => {
      const newScoreData = new Map(prev.scoreData);
      newScoreData.set(pageId, { value, role });
      return {
        ...prev,
        scoreData: newScoreData
      };
    });
  }, []);

  useEffect(() => {
    if (token) {
      fetchSkills();
    }
  }, [token, fetchSkills]);

  return {
    ...state,
    updateSkillScore,
    refetch: fetchSkills
  };
}

export default function SkillsAssessmentForm({ params }) {
  const { token } = params;
  const [submitting, setSubmitting] = useState(false);
  const [submitMessage, setSubmitMessage] = useState('');
  
  const {
    skillGroups,
    loading,
    error,
    scoreData,
    stats,
    loadTime,
    updateSkillScore,
    refetch
  } = useSkillsData(token);

  const totalSkills = useMemo(() => {
    return skillGroups.reduce((sum, group) => sum + (group.items?.length || 0), 0);
  }, [skillGroups]);

  const ratedSkills = scoreData.size;

  const [collapsedGroups, setCollapsedGroups] = useState({});
  const toggleGroup = useCallback((key) => {
    setCollapsedGroups(prev => ({ ...prev, [key]: !prev[key] }));
  }, []);

  const handleSubmit = useCallback(async (e) => {
    e.preventDefault();
    
    if (scoreData.size === 0) {
      setSubmitMessage('‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ü–µ–Ω–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –Ω–∞–≤—ã–∫');
      return;
    }

    setSubmitting(true);
    setSubmitMessage('');
    
    try {
      const items = Array.from(scoreData.entries()).map(([pageId, scoreInfo]) => ({
        pageId,
        value: scoreInfo.value,
        role: scoreInfo.role
      }));

      console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ü–µ–Ω–∫–∏:', items);
      
      const response = await fetch(`/api/form/${token}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          items,
          mode: 'final'
        })
      });

      const raw = await response.text();
      let result = {};

      try {
        result = raw ? JSON.parse(raw) : {};
      } catch {
        throw new Error('—Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç');
      }

      if (!response.ok) {
        throw new Error(result.error || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
      }

      if (result.ok) {
        setSubmitMessage(`‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${result.queued} –æ—Ü–µ–Ω–æ–∫!`);
      } else {
        throw new Error(result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
      }
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', error);
      const msg = error.message === 'Failed to fetch'
        ? '–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º'
        : error.message;
      setSubmitMessage(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${msg}`);
    } finally {
      setSubmitting(false);
    }
  }, [scoreData, token]);

  const handleSaveDraft = useCallback(async () => {
    if (scoreData.size === 0) {
      setSubmitMessage('‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
      return;
    }

    setSubmitting(true);
    setSubmitMessage('');
    
    try {
      const items = Array.from(scoreData.entries()).map(([pageId, scoreInfo]) => ({
        pageId,
        value: scoreInfo.value,
        role: scoreInfo.role
      }));

      const response = await fetch(`/api/form/${token}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          items,
          mode: 'draft'
        })
      });

      const raw = await response.text();
      let result = {};

      try {
        result = raw ? JSON.parse(raw) : {};
      } catch {
        throw new Error('—Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç');
      }

      if (!response.ok) {
        throw new Error(result.error || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞');
      }

      if (result.ok) {
        setSubmitMessage(`üíæ –ß–µ—Ä–Ω–æ–≤–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω (${result.queued} –æ—Ü–µ–Ω–æ–∫)`);
      }
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞:', error);
      const msg = error.message === 'Failed to fetch'
        ? '–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º'
        : error.message;
      setSubmitMessage(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${msg}`);
    } finally {
      setSubmitting(false);
    }
  }, [scoreData, token]);

  return (
    <div style={{ 
      minHeight: '100vh', 
      backgroundColor: '#f8f9fa',
      fontFamily: 'system-ui, -apple-system, sans-serif'
    }}>
      <StateHandler 
        loading={loading} 
        error={error} 
        empty={skillGroups.length === 0}
        onRetry={refetch}
      >
        <div style={{ 
          maxWidth: 1200, 
          margin: '0 auto', 
          padding: 24 
        }}>
          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
          <div style={{
            backgroundColor: 'white',
            borderRadius: 12,
            padding: 32,
            marginBottom: 24,
            boxShadow: '0 2px 8px rgba(0,0,0,0.1)',
            textAlign: 'center'
          }}>
            <h1 style={{ 
              fontSize: 28, 
              fontWeight: 700, 
              color: '#2c3e50', 
              marginBottom: 16 
            }}>
              üìä –§–æ—Ä–º–∞ –æ—Ü–µ–Ω–∫–∏ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π
            </h1>
            <div style={{
              color: '#6c757d',
              marginBottom: 16,
              fontSize: 16,
              lineHeight: 1.5
            }}>
              –û—Ü–µ–Ω–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –≤–ª–∞–¥–µ–Ω–∏—è –Ω–∞–≤—ã–∫–∞–º–∏ –ø–æ —à–∫–∞–ª–µ –æ—Ç 0 –¥–æ 5
            </div>
            {stats?.reviewerName && (
              <div style={{
                color: '#495057',
                fontSize: 16,
                fontWeight: 600
              }}>
                –†–µ–≤—å—é–≤–µ—Ä: {stats.reviewerName}
              </div>
            )}

          </div>

          {/* –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä */}
          <div style={{
            backgroundColor: 'white',
            borderRadius: 12,
            padding: 20,
            marginBottom: 24,
            boxShadow: '0 2px 8px rgba(0,0,0,0.1)'
          }}>
            <div style={{
              display: 'flex',
              justifyContent: 'space-between',
              alignItems: 'center',
              marginBottom: 12
            }}>
              <span style={{ fontWeight: 600, color: '#495057' }}>
                –ü—Ä–æ–≥—Ä–µ—Å—Å –æ—Ü–µ–Ω–∫–∏
              </span>
              <span style={{ color: '#6c757d', fontSize: 14 }}>
                {ratedSkills} –∏–∑ {totalSkills} –Ω–∞–≤—ã–∫–æ–≤
              </span>
            </div>
            <div style={{
              width: '100%',
              height: 8,
              backgroundColor: '#e9ecef',
              borderRadius: 4,
              overflow: 'hidden'
            }}>
              <div className="progress-bar" style={{
                width: `${totalSkills > 0 ? (ratedSkills / totalSkills) * 100 : 0}%`,
                height: '100%',
                backgroundColor: '#007bff',
                borderRadius: 4
              }}></div>
            </div>
          </div>

          {/* –§–æ—Ä–º–∞ –æ—Ü–µ–Ω–∫–∏ */}
          <form onSubmit={handleSubmit}>
            {skillGroups.map((group) => {
              const key = `${group.employeeId}_${group.role}`;
              const isCollapsed = collapsedGroups[key];
              return (
                <div
                  key={key}
                  style={{
                    backgroundColor: 'white',
                    borderRadius: 12,
                    marginBottom: 24,
                    boxShadow: '0 2px 8px rgba(0,0,0,0.1)',
                    overflow: 'hidden'
                  }}
                >
                  {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≥—Ä—É–ø–ø—ã */}
                  <div
                    onClick={() => toggleGroup(key)}
                    style={{
                      backgroundColor: '#f8f9fa',
                      padding: 20,
                      borderBottom: '1px solid #dee2e6',
                      cursor: 'pointer',
                      display: 'flex',
                      justifyContent: 'space-between',
                      alignItems: 'center'
                    }}
                  >
                    <div>
                      <h2 style={{
                        fontSize: 20,
                        fontWeight: 600,
                        color: '#495057',
                        margin: 0,
                        marginBottom: 8
                      }}>
                        üë§ {group.employeeName}
                      </h2>
                      <div style={{
                        display: 'flex',
                        alignItems: 'center',
                        gap: 16
                      }}>
                        <span style={{
                          backgroundColor: '#007bff',
                          color: 'white',
                          padding: '4px 12px',
                          borderRadius: 16,
                          fontSize: 12,
                          fontWeight: 600,
                          textTransform: 'uppercase'
                        }}>
                          {group.role === 'self' ? '–°–∞–º–æ–æ—Ü–µ–Ω–∫–∞' :
                           group.role === 'manager' ? '–û—Ü–µ–Ω–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞' :
                           group.role === 'p1_peer' ? 'Peer-–æ—Ü–µ–Ω–∫–∞' :
                           group.role === 'p2_peer' ? 'Peer-–æ—Ü–µ–Ω–∫–∞' :
                           'Peer –æ—Ü–µ–Ω–∫–∞'}
                        </span>
                        <span style={{ color: '#6c757d', fontSize: 14 }}>
                          {group.items?.length || 0} –Ω–∞–≤—ã–∫–æ–≤
                        </span>
                      </div>
                    </div>
                    <span style={{ fontSize: 20, color: '#6c757d' }}>
                      {isCollapsed ? '‚ñ∂' : '‚ñº'}
                    </span>
                  </div>

                  {/* –°–ø–∏—Å–æ–∫ –Ω–∞–≤—ã–∫–æ–≤ */}
                  {!isCollapsed && (
                    <div style={{ padding: '20px 0' }}>
                      {(group.items || []).map((item) => (
                        <ScoreRow
                          key={item.pageId}
                          item={item}
                          onChange={({ value }) => updateSkillScore(item.pageId, group.role, value)}
                          hideComment={true}
                        />
                      ))}
                    </div>
                  )}
                </div>
              );
            })}

            {/* –ü–∞–Ω–µ–ª—å –¥–µ–π—Å—Ç–≤–∏–π */}
            <div style={{
              backgroundColor: 'white',
              borderRadius: 12,
              padding: 24,
              boxShadow: '0 2px 8px rgba(0,0,0,0.1)',
              position: 'sticky',
              bottom: 24
            }}>
              <div style={{
                display: 'flex',
                justifyContent: 'space-between',
                alignItems: 'center',
                flexWrap: 'wrap',
                gap: 16
              }}>
                <div>
                  <div style={{ 
                    fontWeight: 600, 
                    color: '#495057',
                    marginBottom: 4
                  }}>
                    –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ: {Math.round((ratedSkills / totalSkills) * 100) || 0}%
                  </div>
                  <div style={{ color: '#6c757d', fontSize: 14 }}>
                    {ratedSkills === totalSkills ? 
                      '‚úÖ –í—Å–µ –Ω–∞–≤—ã–∫–∏ –æ—Ü–µ–Ω–µ–Ω—ã' : 
                      `${totalSkills - ratedSkills} –Ω–∞–≤—ã–∫–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å`
                    }
                  </div>
                </div>

                <div style={{ display: 'flex', gap: 12 }}>
                  <button
                    type="button"
                    onClick={handleSaveDraft}
                    disabled={submitting || ratedSkills === 0}
                    style={{
                      padding: '12px 20px',
                      backgroundColor: submitting ? '#6c757d' : '#6f42c1',
                      color: 'white',
                      border: 'none',
                      borderRadius: 8,
                      fontSize: 14,
                      fontWeight: 600,
                      cursor: submitting || ratedSkills === 0 ? 'not-allowed' : 'pointer',
                      transition: 'background-color 0.2s ease'
                    }}
                  >
                    üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫
                  </button>

                  <button
                    type="submit"
                    disabled={submitting || ratedSkills === 0}
                    style={{
                      padding: '12px 24px',
                      backgroundColor: submitting ? '#6c757d' : '#28a745',
                      color: 'white',
                      border: 'none',
                      borderRadius: 8,
                      fontSize: 16,
                      fontWeight: 600,
                      cursor: submitting || ratedSkills === 0 ? 'not-allowed' : 'pointer',
                      transition: 'background-color 0.2s ease',
                      boxShadow: '0 2px 4px rgba(40,167,69,0.2)'
                    }}
                  >
                    {submitting ? '‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º...' : 'üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É'}
                  </button>
                </div>
              </div>

              {submitMessage && (
                <div style={{
                  marginTop: 16,
                  padding: 12,
                  borderRadius: 8,
                  backgroundColor: submitMessage.includes('‚ùå') ? '#f8d7da' : 
                                  submitMessage.includes('üíæ') ? '#d1ecf1' : '#d4edda',
                  color: submitMessage.includes('‚ùå') ? '#721c24' : 
                         submitMessage.includes('üíæ') ? '#0c5460' : '#155724',
                  fontSize: 14,
                  textAlign: 'center'
                }}>
                  {submitMessage}
                </div>
              )}
            </div>
          </form>
        </div>
      </StateHandler>
      {!loading && (
        <div style={{
          textAlign: 'center',
          color: '#6c757d',
          fontSize: 12,
          paddingBottom: 24
        }}>
          –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å –∑–∞ {loadTime.toFixed(2)} —Å–µ–∫.
        </div>
      )}
    </div>
  );
}