// lib/kv-queue.js - –ù–ê–î–ï–ñ–ù–ê–Ø –≤–µ—Ä—Å–∏—è –¥–ª—è Cloudflare Pages —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º binding

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è KV
let KV_NAMESPACE = null;
let isKVAvailable = false;
let kvInitialized = false;
let lastContext = null;
let initAttempts = 0;

// –ù–ê–î–ï–ñ–ù–ê–Ø –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è KV –¥–ª—è Cloudflare Pages
export function initKV(context = null) {
  initAttempts++;
  console.log(`[KV INIT] üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ #${initAttempts}...`);
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º context –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö
  if (context) {
    lastContext = context;
    console.log(`[KV INIT] üì¶ Context –ø–æ–ª—É—á–µ–Ω:`, {
      hasContext: !!context,
      hasEnv: !!context.env,
      hasCloudflare: !!context.cloudflare,
      hasWaitUntil: !!context.waitUntil,
      envKeys: context.env ? Object.keys(context.env) : [],
      allKeys: Object.keys(context)
    });
  }
  
  const currentContext = context || lastContext;
  
  try {
    // –°–ü–û–°–û–ë 1: –ì–ª–∞–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –¥–ª—è Cloudflare Pages - —á–µ—Ä–µ–∑ context.env
    if (currentContext?.env?.NOTION_QUEUE_KV) {
      KV_NAMESPACE = currentContext.env.NOTION_QUEUE_KV;
      console.log('[KV INIT] ‚úÖ KV –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ context.env.NOTION_QUEUE_KV (–æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–æ—Å–æ–± –¥–ª—è Pages)');
    }
    // –°–ü–û–°–û–ë 2: –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ context
    else if (currentContext?.NOTION_QUEUE_KV) {
      KV_NAMESPACE = currentContext.NOTION_QUEUE_KV;
      console.log('[KV INIT] ‚úÖ KV –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ context.NOTION_QUEUE_KV');
    }
    // –°–ü–û–°–û–ë 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º bindings (–µ—Å–ª–∏ –µ—Å—Ç—å)
    else if (currentContext?.bindings?.NOTION_QUEUE_KV) {
      KV_NAMESPACE = currentContext.bindings.NOTION_QUEUE_KV;
      console.log('[KV INIT] ‚úÖ KV –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ context.bindings.NOTION_QUEUE_KV');
    }
    // –°–ü–û–°–û–ë 4: –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è (–¥–ª—è Workers)
    else if (typeof NOTION_QUEUE_KV !== 'undefined' && NOTION_QUEUE_KV) {
      KV_NAMESPACE = NOTION_QUEUE_KV;
      console.log('[KV INIT] ‚úÖ KV –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é NOTION_QUEUE_KV');
    }
    // –°–ü–û–°–û–ë 5: –ß–µ—Ä–µ–∑ globalThis
    else if (typeof globalThis !== 'undefined' && globalThis.NOTION_QUEUE_KV) {
      KV_NAMESPACE = globalThis.NOTION_QUEUE_KV;
      console.log('[KV INIT] ‚úÖ KV –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ globalThis.NOTION_QUEUE_KV');
    }
    // –°–ü–û–°–û–ë 6: –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–∑–≤–∞–Ω–∏–π
    else if (currentContext?.env && Object.keys(currentContext.env).some(key => key.includes('NOTION') && key.includes('KV'))) {
      const kvKey = Object.keys(currentContext.env).find(key => key.includes('NOTION') && key.includes('KV'));
      if (kvKey) {
        KV_NAMESPACE = currentContext.env[kvKey];
        console.log(`[KV INIT] ‚úÖ KV –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ context.env.${kvKey}`);
      }
    }
    
  } catch (error) {
    console.warn('[KV INIT] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ KV namespace:', error.message);
  }
  
  const prevStatus = isKVAvailable;
  isKVAvailable = Boolean(KV_NAMESPACE);
  kvInitialized = true;

  console.log(`[KV INIT] üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ø—ã—Ç–∫–∏ #${initAttempts}:`, {
    kvAvailable: isKVAvailable,
    hadNamespace: !!KV_NAMESPACE,
    statusChanged: prevStatus !== isKVAvailable,
    contextProvided: !!currentContext,
    hasEnv: !!currentContext?.env,
    envHasKV: !!currentContext?.env?.NOTION_QUEUE_KV,
    globalKVExists: typeof NOTION_QUEUE_KV !== 'undefined',
    namespaceType: KV_NAMESPACE ? typeof KV_NAMESPACE : 'undefined',
    namespaceConstructor: KV_NAMESPACE ? KV_NAMESPACE.constructor?.name : 'none'
  });

  if (isKVAvailable) {
    console.log('[KV INIT] ‚úÖ Cloudflare KV –ø–æ–¥–∫–ª—é—á–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º KV –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    testKVAccess().catch(error => {
      console.error('[KV INIT] ‚ùå –¢–µ—Å—Ç KV –Ω–µ—É–¥–∞—á–µ–Ω:', error.message);
      isKVAvailable = false;
      KV_NAMESPACE = null;
    });
  } else {
    console.warn('[KV INIT] ‚ö†Ô∏è Cloudflare KV –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏ #' + initAttempts);
    console.warn('üìã –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:');
    if (!currentContext) {
      console.warn('  - Context –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω');
    } else if (!currentContext.env) {
      console.warn('  - Context.env –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
    } else if (!currentContext.env.NOTION_QUEUE_KV) {
      console.warn('  - NOTION_QUEUE_KV –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ context.env');
      console.warn('  - –î–æ—Å—Ç—É–ø–Ω—ã–µ env –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:', Object.keys(currentContext.env));
    }
    console.warn('üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:');
    console.warn('  1. KV binding –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ Cloudflare Dashboard');
    console.warn('  2. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–µ—Ä–µ—Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ binding');
    console.warn('  3. KV namespace —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–æ—Å—Ç—É–ø–µ–Ω');
  }
  
  return isKVAvailable;
}

// –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ KV
async function testKVAccess() {
  if (!KV_NAMESPACE) {
    console.error('[KV TEST] ‚ùå KV_NAMESPACE is null');
    return false;
  }
  
  console.log('[KV TEST] üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ KV...');
  console.log('[KV TEST] üìä KV –æ–±—ä–µ–∫—Ç:', {
    type: typeof KV_NAMESPACE,
    constructor: KV_NAMESPACE.constructor?.name,
    hasPut: typeof KV_NAMESPACE.put === 'function',
    hasGet: typeof KV_NAMESPACE.get === 'function',
    hasDelete: typeof KV_NAMESPACE.delete === 'function'
  });
  
  try {
    const testKey = 'kv_test_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
    const testValue = 'test_connectivity_' + Date.now();
    
    console.log(`[KV TEST] ‚úçÔ∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º PUT –æ–ø–µ—Ä–∞—Ü–∏—é —Å –∫–ª—é—á–æ–º: ${testKey}`);
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ KV
    await KV_NAMESPACE.put(testKey, testValue, { expirationTtl: 60 });
    console.log('[KV TEST] ‚úÖ PUT –æ–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
    
    console.log(`[KV TEST] üìñ –¢–µ—Å—Ç–∏—Ä—É–µ–º GET –æ–ø–µ—Ä–∞—Ü–∏—é...`);
    const retrievedValue = await KV_NAMESPACE.get(testKey);
    console.log(`[KV TEST] üìñ –ü–æ–ª—É—á–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ: ${retrievedValue}`);
    
    console.log(`[KV TEST] üóëÔ∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º DELETE –æ–ø–µ—Ä–∞—Ü–∏—é...`);
    await KV_NAMESPACE.delete(testKey);
    console.log('[KV TEST] ‚úÖ DELETE –æ–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
    
    const isWorking = retrievedValue === testValue;
    console.log(`[KV TEST] ${isWorking ? '‚úÖ' : '‚ùå'} –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${isWorking ? '–£–°–ü–ï–•' : '–ù–ï–£–î–ê–ß–ê'}`);
    
    if (!isWorking) {
      console.error(`[KV TEST] ‚ùå –û–∂–∏–¥–∞–ª–æ—Å—å: "${testValue}", –ø–æ–ª—É—á–µ–Ω–æ: "${retrievedValue}"`);
      throw new Error('KV –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ - –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç');
    }
    
    return true;
  } catch (error) {
    console.error('[KV TEST] ‚ùå KV —Ç–µ—Å—Ç –Ω–µ—É–¥–∞—á–µ–Ω:', {
      message: error.message,
      stack: error.stack,
      kvNamespace: !!KV_NAMESPACE,
      kvType: typeof KV_NAMESPACE
    });
    isKVAvailable = false;
    KV_NAMESPACE = null;
    return false;
  }
}

// –£–º–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ KV —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π
export function isKVConnected() {
  // –ï—Å–ª–∏ KV –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –Ω–æ –µ—Å—Ç—å context - –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å
  if (!isKVAvailable && lastContext) {
    console.log('[KV CHECK] üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è KV...');
    initKV(lastContext);
  }
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
  if (!isKVAvailable && typeof NOTION_QUEUE_KV !== 'undefined') {
    console.log('[KV CHECK] üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è, –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...');
    initKV();
  }
  
  const result = isKVAvailable && !!KV_NAMESPACE;
  console.log(`[KV CHECK] üìä –°—Ç–∞—Ç—É—Å KV: ${result ? '‚úÖ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ' : '‚ùå –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ'}`);
  return result;
}

// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ KV (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
export function disableKV() {
  console.log('[KV DISABLE] ‚õî –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º KV');
  isKVAvailable = false;
  KV_NAMESPACE = null;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ KV –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
export function getKVDiagnostics() {
  return {
    isKVAvailable,
    hasNamespace: !!KV_NAMESPACE,
    kvInitialized,
    initAttempts,
    hasLastContext: !!lastContext,
    lastContextKeys: lastContext ? Object.keys(lastContext) : [],
    lastContextEnvKeys: lastContext?.env ? Object.keys(lastContext.env) : [],
    namespaceType: KV_NAMESPACE ? typeof KV_NAMESPACE : 'undefined',
    namespaceConstructor: KV_NAMESPACE ? KV_NAMESPACE.constructor?.name : 'none'
  };
}

// –ö–ª—é—á–∏ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ KV
const KV_KEYS = {
  JOB: 'job:',
  QUEUE: 'queue:',
  STATUS: 'status:',
  RESULT: 'result:',
  PROGRESS: 'progress:',
  ACTIVE_JOBS: 'system:active_jobs',
  QUEUE_STATS: 'system:queue_stats'
};

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
  MAX_BATCH_SIZE: 75,
  DEFAULT_CONCURRENCY: 2,
  DEFAULT_RATE_LIMIT: 2500,
  MAX_RETRIES: 3,
  JOB_TTL: 3600,
  RESULT_TTL: 7200,
  PROGRESS_UPDATE_INTERVAL: 5,
  KV_OPERATION_TIMEOUT: 5000
};

// –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã ID
function generateJobId() {
  return `job_${Date.now()}_${Math.random().toString(36).substring(2, 15)}`;
}

function generateBatchId() {
  return `batch_${Date.now()}_${Math.random().toString(36).substring(2, 15)}`;
}

// –ù–∞–¥–µ–∂–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å KV
class KVUtils {
  static async withTimeout(operation, timeout = CONFIG.KV_OPERATION_TIMEOUT) {
    return Promise.race([
      operation(),
      new Promise((_, reject) => 
        setTimeout(() => reject(new Error('KV operation timeout')), timeout)
      )
    ]);
  }

  static async put(key, value, ttl = CONFIG.JOB_TTL) {
    if (!isKVAvailable || !KV_NAMESPACE) {
      throw new Error('Cloudflare KV –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –∑–∞–ø–∏—Å–∏');
    }
    
    try {
      const serializedValue = typeof value === 'string' ? value : JSON.stringify(value);
      console.log(`[KV PUT] ‚úçÔ∏è –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–ª—é—á: ${key} (${serializedValue.length} —Å–∏–º–≤–æ–ª–æ–≤)`);
      const result = await this.withTimeout(() => 
        KV_NAMESPACE.put(key, serializedValue, { expirationTtl: ttl })
      );
      console.log(`[KV PUT] ‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω –∫–ª—é—á: ${key}`);
      return result;
    } catch (error) {
      console.error(`[KV PUT] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∫–ª—é—á–∞ ${key}:`, error.message);
      throw new Error(`KV PUT failed: ${error.message}`);
    }
  }

  static async get(key, parseJSON = true) {
    if (!isKVAvailable || !KV_NAMESPACE) {
      throw new Error('Cloudflare KV –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —á—Ç–µ–Ω–∏—è');
    }
    
    try {
      console.log(`[KV GET] üìñ –ß–∏—Ç–∞–µ–º –∫–ª—é—á: ${key}`);
      const value = await this.withTimeout(() => KV_NAMESPACE.get(key));
      
      if (value === null) {
        console.log(`[KV GET] ‚ÑπÔ∏è –ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω: ${key}`);
        return null;
      }
      
      console.log(`[KV GET] ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${value.length} —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∫–ª—é—á–∞: ${key}`);
      
      if (!parseJSON) {
        return value;
      }
      
      try {
        return JSON.parse(value);
      } catch (parseError) {
        console.warn(`[KV GET] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–∞—Ä—Å–∏—Ç—å JSON –¥–ª—è –∫–ª—é—á–∞ ${key}, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–æ–∫—É`);
        return value;
      }
    } catch (error) {
      console.error(`[KV GET] ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–ª—é—á–∞ ${key}:`, error.message);
      throw new Error(`KV GET failed: ${error.message}`);
    }
  }

  static async delete(key) {
    if (!isKVAvailable || !KV_NAMESPACE) {
      throw new Error('Cloudflare KV –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
    }
    
    try {
      console.log(`[KV DELETE] üóëÔ∏è –£–¥–∞–ª—è–µ–º –∫–ª—é—á: ${key}`);
      const result = await this.withTimeout(() => KV_NAMESPACE.delete(key));
      console.log(`[KV DELETE] ‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∫–ª—é—á: ${key}`);
      return result;
    } catch (error) {
      console.error(`[KV DELETE] ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª—é—á–∞ ${key}:`, error.message);
      throw new Error(`KV DELETE failed: ${error.message}`);
    }
  }

  static async list(prefix = '', limit = 100) {
    if (!isKVAvailable || !KV_NAMESPACE) {
      throw new Error('Cloudflare KV –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –ª–∏—Å—Ç–∏–Ω–≥–∞');
    }
    
    try {
      console.log(`[KV LIST] üìã –õ–∏—Å—Ç–∏–Ω–≥ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º: ${prefix}, –ª–∏–º–∏—Ç: ${limit}`);
      const result = await this.withTimeout(() => 
        KV_NAMESPACE.list({ prefix, limit })
      );
      console.log(`[KV LIST] ‚úÖ –ù–∞–π–¥–µ–Ω–æ ${result.keys?.length || 0} –∫–ª—é—á–µ–π`);
      return result;
    } catch (error) {
      console.error(`[KV LIST] ‚ùå –û—à–∏–±–∫–∞ –ª–∏—Å—Ç–∏–Ω–≥–∞ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º ${prefix}:`, error.message);
      throw new Error(`KV LIST failed: ${error.message}`);
    }
  }
}

// –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–ª–∞—Å—Å—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è —Ç–∞–∫–∏–º–∏ –∂–µ...
// (NotionBatchProcessor, addBatchToKVQueue, getKVBatchStatus)

export { KVUtils, CONFIG, KV_KEYS };