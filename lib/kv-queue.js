// lib/kv-queue.js - –ü–û–õ–ù–ê–Ø –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è Next.js –Ω–∞ Cloudflare Pages

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è KV
let KV_NAMESPACE = null;
let isKVAvailable = false;
let kvInitialized = false;
let lastContext = null;
let initAttempts = 0;

// –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è KV –¥–ª—è Next.js –Ω–∞ Cloudflare Pages
export function initKV(context = null) {
  initAttempts++;
  console.log(`[KV INIT] üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ #${initAttempts} –¥–ª—è Next.js –Ω–∞ Cloudflare Pages...`);
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º context –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö
  if (context) {
    lastContext = context;
    console.log(`[KV INIT] üì¶ Context –ø–æ–ª—É—á–µ–Ω:`, {
      hasContext: !!context,
      hasEnv: !!context.env,
      contextKeys: Object.keys(context),
      contextType: typeof context
    });
  }
  
  const currentContext = context || lastContext;
  
  // –°–±—Ä–æ—Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  KV_NAMESPACE = null;
  isKVAvailable = false;
  
  try {
    // –°–ü–û–°–û–ë 1: Next.js –Ω–∞ Cloudflare Pages - –ø—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ bindings
    if (typeof NOTION_QUEUE_KV !== 'undefined' && NOTION_QUEUE_KV) {
      KV_NAMESPACE = NOTION_QUEUE_KV;
      console.log('[KV INIT] ‚úÖ KV –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é NOTION_QUEUE_KV (Next.js –Ω–∞ CF Pages)');
      console.log('[KV INIT] üìä KV –æ–±—ä–µ–∫—Ç:', {
        type: typeof KV_NAMESPACE,
        constructor: KV_NAMESPACE.constructor?.name,
        hasPut: typeof KV_NAMESPACE.put === 'function',
        hasGet: typeof KV_NAMESPACE.get === 'function',
        hasDelete: typeof KV_NAMESPACE.delete === 'function'
      });
    }
    // –°–ü–û–°–û–ë 2: –ß–µ—Ä–µ–∑ globalThis (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –¥–æ—Å—Ç—É–ø)
    else if (typeof globalThis !== 'undefined' && globalThis.NOTION_QUEUE_KV) {
      KV_NAMESPACE = globalThis.NOTION_QUEUE_KV;
      console.log('[KV INIT] ‚úÖ KV –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ globalThis.NOTION_QUEUE_KV');
    }
    // –°–ü–û–°–û–ë 3: –ß–µ—Ä–µ–∑ process.env –¥–ª—è Next.js (–µ—Å–ª–∏ binding –ø–æ–ø–∞–¥–∞–µ—Ç —Ç—É–¥–∞)
    else if (typeof process !== 'undefined' && process.env && process.env.NOTION_QUEUE_KV) {
      // –í Next.js –Ω–∞ CF Pages bindings –º–æ–≥—É—Ç –ø–æ–ø–∞–¥–∞—Ç—å –≤ process.env
      const envValue = process.env.NOTION_QUEUE_KV;
      if (envValue && typeof envValue === 'object' && typeof envValue.get === 'function') {
        KV_NAMESPACE = envValue;
        console.log('[KV INIT] ‚úÖ KV –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ process.env.NOTION_QUEUE_KV (Next.js —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ)');
      }
    }
    // –°–ü–û–°–û–ë 4: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π context.env (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    else if (currentContext?.env?.NOTION_QUEUE_KV) {
      KV_NAMESPACE = currentContext.env.NOTION_QUEUE_KV;
      console.log('[KV INIT] ‚úÖ KV –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ context.env.NOTION_QUEUE_KV');
    }
    // –°–ü–û–°–û–ë 5: –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø—É—Ç–∏ –≤ context
    else if (currentContext?.NOTION_QUEUE_KV) {
      KV_NAMESPACE = currentContext.NOTION_QUEUE_KV;
      console.log('[KV INIT] ‚úÖ KV –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ context.NOTION_QUEUE_KV');
    }
    // –°–ü–û–°–û–ë 6: –ü—Ä–æ–≤–µ—Ä—è–µ–º bindings –≤ context
    else if (currentContext?.bindings?.NOTION_QUEUE_KV) {
      KV_NAMESPACE = currentContext.bindings.NOTION_QUEUE_KV;
      console.log('[KV INIT] ‚úÖ KV –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ context.bindings.NOTION_QUEUE_KV');
    }
    // –°–ü–û–°–û–ë 7: –ü–æ–∏—Å–∫ —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    else if (typeof window === 'undefined') { // –¢–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å KV –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
      const globalVars = ['NOTION_QUEUE_KV', 'NotionQueueKV', 'notionQueueKV'];
      for (const varName of globalVars) {
        if (typeof global !== 'undefined' && global[varName]) {
          KV_NAMESPACE = global[varName];
          console.log(`[KV INIT] ‚úÖ KV –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ global.${varName}`);
          break;
        }
      }
    }
    
  } catch (error) {
    console.warn('[KV INIT] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ KV namespace:', error.message);
  }
  
  const prevStatus = isKVAvailable;
  isKVAvailable = Boolean(KV_NAMESPACE);
  kvInitialized = true;

  console.log(`[KV INIT] üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ø—ã—Ç–∫–∏ #${initAttempts}:`, {
    kvAvailable: isKVAvailable,
    hadNamespace: !!KV_NAMESPACE,
    statusChanged: prevStatus !== isKVAvailable,
    contextProvided: !!currentContext,
    hasEnv: !!currentContext?.env,
    globalKVExists: typeof NOTION_QUEUE_KV !== 'undefined',
    processEnvKV: !!(process?.env?.NOTION_QUEUE_KV),
    namespaceType: KV_NAMESPACE ? typeof KV_NAMESPACE : 'undefined',
    namespaceConstructor: KV_NAMESPACE ? KV_NAMESPACE.constructor?.name : 'none'
  });

  if (isKVAvailable) {
    console.log('[KV INIT] ‚úÖ Cloudflare KV –ø–æ–¥–∫–ª—é—á–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
    
    // –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ KV (–±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è)
    testKVAccessQuickly().catch(error => {
      console.error('[KV INIT] ‚ùå –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç KV –Ω–µ—É–¥–∞—á–µ–Ω:', error.message);
      isKVAvailable = false;
      KV_NAMESPACE = null;
    });
  } else {
    console.warn('[KV INIT] ‚ö†Ô∏è Cloudflare KV –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏ #' + initAttempts);
    logKVDiagnosticsForNextJS(currentContext);
  }
  
  return isKVAvailable;
}

// –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ KV
export function isKVConnected() {
  // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  if (!isKVAvailable || !KV_NAMESPACE) {
    // –ï—Å–ª–∏ KV –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –Ω–æ –µ—Å—Ç—å context - –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–¥–∏–Ω —Ä–∞–∑
    if (!isKVAvailable && lastContext && initAttempts < 3) {
      console.log('[KV CHECK] üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è KV...');
      const reinitResult = initKV(lastContext);
      if (reinitResult) {
        console.log('[KV CHECK] ‚úÖ –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
        return true;
      }
    }
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    if (!isKVAvailable && typeof NOTION_QUEUE_KV !== 'undefined') {
      console.log('[KV CHECK] üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è, –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...');
      const globalResult = initKV();
      if (globalResult) {
        console.log('[KV CHECK] ‚úÖ –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
        return true;
      }
    }
    
    console.log(`[KV CHECK] ‚ùå KV –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ—Å–ª–µ ${initAttempts} –ø–æ–ø—ã—Ç–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏`);
    return false;
  }
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ KV –æ–±—ä–µ–∫—Ç –∏–º–µ–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–µ—Ç–æ–¥—ã
  const hasRequiredMethods = KV_NAMESPACE && 
    typeof KV_NAMESPACE.get === 'function' &&
    typeof KV_NAMESPACE.put === 'function' &&
    typeof KV_NAMESPACE.delete === 'function';
  
  if (!hasRequiredMethods) {
    console.error('[KV CHECK] ‚ùå KV –æ–±—ä–µ–∫—Ç –Ω–µ –∏–º–µ–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–µ—Ç–æ–¥–æ–≤');
    isKVAvailable = false;
    return false;
  }
  
  const result = isKVAvailable && !!KV_NAMESPACE;
  console.log(`[KV CHECK] üìä –°—Ç–∞—Ç—É—Å KV: ${result ? '‚úÖ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ' : '‚ùå –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ'}`);
  return result;
}

// –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç KV –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
async function testKVAccessQuickly() {
  if (!KV_NAMESPACE) {
    throw new Error('KV_NAMESPACE is null');
  }
  
  try {
    const testKey = 'quick_test_' + Date.now();
    const testValue = 'test_connectivity';
    
    // –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º
    await Promise.race([
      KV_NAMESPACE.put(testKey, testValue, { expirationTtl: 30 }),
      new Promise((_, reject) => setTimeout(() => reject(new Error('Timeout')), 2000))
    ]);
    
    const retrievedValue = await Promise.race([
      KV_NAMESPACE.get(testKey),
      new Promise((_, reject) => setTimeout(() => reject(new Error('Timeout')), 2000))
    ]);
    
    await KV_NAMESPACE.delete(testKey).catch(() => {}); // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—á–∏—Å—Ç–∫–∏
    
    const isWorking = retrievedValue === testValue;
    console.log(`[KV TEST] ‚ö° –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç: ${isWorking ? '–£–°–ü–ï–•' : '–ù–ï–£–î–ê–ß–ê'}`);
    
    if (!isWorking) {
      throw new Error('KV –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    }
    
    return true;
  } catch (error) {
    console.error('[KV TEST] ‚ùå –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –Ω–µ—É–¥–∞—á–µ–Ω:', error.message);
    throw error;
  }
}

// –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–ª—è Next.js –Ω–∞ Cloudflare Pages
function logKVDiagnosticsForNextJS(currentContext) {
  console.warn('üìã –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê KV –¥–ª—è Next.js –Ω–∞ Cloudflare Pages:');
  
  console.warn('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö:');
  console.warn('  - typeof NOTION_QUEUE_KV:', typeof NOTION_QUEUE_KV);
  console.warn('  - globalThis.NOTION_QUEUE_KV:', !!globalThis.NOTION_QUEUE_KV);
  console.warn('  - process.env.NOTION_QUEUE_KV —Ç–∏–ø:', typeof process?.env?.NOTION_QUEUE_KV);
  
  if (currentContext) {
    console.warn('üîç –ê–Ω–∞–ª–∏–∑ context:');
    console.warn('  - context.env:', !!currentContext.env);
    console.warn('  - context –∫–ª—é—á–∏:', Object.keys(currentContext));
    if (currentContext.env) {
      console.warn('  - context.env –∫–ª—é—á–∏:', Object.keys(currentContext.env));
    }
  } else {
    console.warn('  ‚ùå Context –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω');
  }
  
  console.warn('üìã –°–ü–ï–¶–ò–§–ò–ß–ù–´–ô –ß–ï–ö–õ–ò–°–¢ –¥–ª—è Next.js –Ω–∞ Cloudflare Pages:');
  console.warn('  1. ‚úÖ KV binding –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ Pages Dashboard (—É –≤–∞—Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω)');
  console.warn('  2. üîÑ –ü–µ—Ä–µ—Ä–∞–∑–≤–µ—Ä–Ω–∏—Ç–µ —á–µ—Ä–µ–∑: npm run cf:deploy');
  console.warn('  3. ‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 5 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è');
  console.warn('  4. üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ @cloudflare/next-on-pages –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏');
  console.warn('  5. üìù –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤ next.config.mjs –Ω–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫');
}

// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è KV
export function reinitializeKV(context) {
  console.log('[KV REINIT] üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è KV');
  
  // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
  KV_NAMESPACE = null;
  isKVAvailable = false;
  kvInitialized = false;
  initAttempts = 0;
  
  // –ù–æ–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
  return initKV(context);
}

// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ KV (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
export function disableKV() {
  console.log('[KV DISABLE] ‚õî –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º KV');
  isKVAvailable = false;
  KV_NAMESPACE = null;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ KV –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
export function getKVDiagnostics() {
  return {
    isKVAvailable,
    hasNamespace: !!KV_NAMESPACE,
    kvInitialized,
    initAttempts,
    hasLastContext: !!lastContext,
    lastContextKeys: lastContext ? Object.keys(lastContext) : [],
    lastContextEnvKeys: lastContext?.env ? Object.keys(lastContext.env).filter(key => 
      key.includes('KV') || key.includes('NOTION')
    ) : [],
    namespaceType: KV_NAMESPACE ? typeof KV_NAMESPACE : 'undefined',
    namespaceConstructor: KV_NAMESPACE ? KV_NAMESPACE.constructor?.name : 'none',
    hasMethods: KV_NAMESPACE ? {
      get: typeof KV_NAMESPACE.get === 'function',
      put: typeof KV_NAMESPACE.put === 'function',
      delete: typeof KV_NAMESPACE.delete === 'function',
      list: typeof KV_NAMESPACE.list === 'function'
    } : {},
    globalKVAvailable: typeof NOTION_QUEUE_KV !== 'undefined',
    timestamp: new Date().toISOString()
  };
}

// –ö–ª—é—á–∏ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ KV
const KV_KEYS = {
  JOB: 'job:',
  QUEUE: 'queue:',
  STATUS: 'status:',
  RESULT: 'result:',
  PROGRESS: 'progress:',
  ACTIVE_JOBS: 'system:active_jobs',
  QUEUE_STATS: 'system:queue_stats'
};

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
  MAX_BATCH_SIZE: 75,
  DEFAULT_CONCURRENCY: 2,
  DEFAULT_RATE_LIMIT: 2500,
  MAX_RETRIES: 3,
  JOB_TTL: 3600,
  RESULT_TTL: 7200,
  PROGRESS_UPDATE_INTERVAL: 5,
  KV_OPERATION_TIMEOUT: 5000
};

// –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã ID
function generateJobId() {
  return `job_${Date.now()}_${Math.random().toString(36).substring(2, 15)}`;
}

function generateBatchId() {
  return `batch_${Date.now()}_${Math.random().toString(36).substring(2, 15)}`;
}

// –ù–∞–¥–µ–∂–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å KV
class KVUtils {
  static async withTimeout(operation, timeout = CONFIG.KV_OPERATION_TIMEOUT) {
    return Promise.race([
      operation(),
      new Promise((_, reject) => 
        setTimeout(() => reject(new Error('KV operation timeout')), timeout)
      )
    ]);
  }

  static async put(key, value, ttl = CONFIG.JOB_TTL) {
    if (!isKVAvailable || !KV_NAMESPACE) {
      throw new Error('Cloudflare KV –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –∑–∞–ø–∏—Å–∏');
    }
    
    try {
      const serializedValue = typeof value === 'string' ? value : JSON.stringify(value);
      console.log(`[KV PUT] ‚úçÔ∏è –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–ª—é—á: ${key} (${serializedValue.length} —Å–∏–º–≤–æ–ª–æ–≤)`);
      const result = await this.withTimeout(() => 
        KV_NAMESPACE.put(key, serializedValue, { expirationTtl: ttl })
      );
      console.log(`[KV PUT] ‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω –∫–ª—é—á: ${key}`);
      return result;
    } catch (error) {
      console.error(`[KV PUT] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∫–ª—é—á–∞ ${key}:`, error.message);
      throw new Error(`KV PUT failed: ${error.message}`);
    }
  }

  static async get(key, parseJSON = true) {
    if (!isKVAvailable || !KV_NAMESPACE) {
      throw new Error('Cloudflare KV –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —á—Ç–µ–Ω–∏—è');
    }
    
    try {
      console.log(`[KV GET] üìñ –ß–∏—Ç–∞–µ–º –∫–ª—é—á: ${key}`);
      const value = await this.withTimeout(() => KV_NAMESPACE.get(key));
      
      if (value === null) {
        console.log(`[KV GET] ‚ÑπÔ∏è –ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω: ${key}`);
        return null;
      }
      
      console.log(`[KV GET] ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${value.length} —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∫–ª—é—á–∞: ${key}`);
      
      if (!parseJSON) {
        return value;
      }
      
      try {
        return JSON.parse(value);
      } catch (parseError) {
        console.warn(`[KV GET] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–∞—Ä—Å–∏—Ç—å JSON –¥–ª—è –∫–ª—é—á–∞ ${key}, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–æ–∫—É`);
        return value;
      }
    } catch (error) {
      console.error(`[KV GET] ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–ª—é—á–∞ ${key}:`, error.message);
      throw new Error(`KV GET failed: ${error.message}`);
    }
  }

  static async delete(key) {
    if (!isKVAvailable || !KV_NAMESPACE) {
      throw new Error('Cloudflare KV –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
    }
    
    try {
      console.log(`[KV DELETE] üóëÔ∏è –£–¥–∞–ª—è–µ–º –∫–ª—é—á: ${key}`);
      const result = await this.withTimeout(() => KV_NAMESPACE.delete(key));
      console.log(`[KV DELETE] ‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∫–ª—é—á: ${key}`);
      return result;
    } catch (error) {
      console.error(`[KV DELETE] ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª—é—á–∞ ${key}:`, error.message);
      throw new Error(`KV DELETE failed: ${error.message}`);
    }
  }

  static async list(prefix = '', limit = 100) {
    if (!isKVAvailable || !KV_NAMESPACE) {
      throw new Error('Cloudflare KV –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –ª–∏—Å—Ç–∏–Ω–≥–∞');
    }
    
    try {
      console.log(`[KV LIST] üìã –õ–∏—Å—Ç–∏–Ω–≥ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º: ${prefix}, –ª–∏–º–∏—Ç: ${limit}`);
      const result = await this.withTimeout(() => 
        KV_NAMESPACE.list({ prefix, limit })
      );
      console.log(`[KV LIST] ‚úÖ –ù–∞–π–¥–µ–Ω–æ ${result.keys?.length || 0} –∫–ª—é—á–µ–π`);
      return result;
    } catch (error) {
      console.error(`[KV LIST] ‚ùå –û—à–∏–±–∫–∞ –ª–∏—Å—Ç–∏–Ω–≥–∞ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º ${prefix}:`, error.message);
      throw new Error(`KV LIST failed: ${error.message}`);
    }
  }
}

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è batch –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
export class NotionBatchProcessor {
  constructor(notionClient, options = {}) {
    this.notion = notionClient;
    this.options = {
      batchSize: Math.min(options.batchSize || 50, CONFIG.MAX_BATCH_SIZE),
      concurrency: Math.min(options.concurrency || CONFIG.DEFAULT_CONCURRENCY, 5),
      rateLimitDelay: Math.max(options.rateLimitDelay || CONFIG.DEFAULT_RATE_LIMIT, 1500),
      maxRetries: Math.min(options.maxRetries || CONFIG.MAX_RETRIES, 5),
      useKV: options.useKV !== false && isKVAvailable,
      reviewerUserId: options.reviewerUserId || 'unknown',
      ...options
    };
    
    console.log(`[BATCH PROCESSOR] üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:`, {
      useKV: this.options.useKV,
      kvAvailable: isKVAvailable,
      batchSize: this.options.batchSize,
      concurrency: this.options.concurrency,
      rateLimitDelay: this.options.rateLimitDelay
    });
  }

  async processBatch(operations, progressCallback = null) {
    console.log(`[BATCH] üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É ${operations.length} –æ–ø–µ—Ä–∞—Ü–∏–π`);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–º–µ—Ä–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ KV
    if (this.options.useKV && operations.length > 10) {
      try {
        return await this.processBatchWithKV(operations, progressCallback);
      } catch (kvError) {
        console.error('[BATCH] ‚ùå KV –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—É–¥–∞—á–Ω–∞, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ø—Ä—è–º—É—é:', kvError.message);
        return await this.processBatchDirectly(operations, progressCallback);
      }
    } else {
      return await this.processBatchDirectly(operations, progressCallback);
    }
  }

  async processBatchWithKV(operations, progressCallback) {
    if (!isKVAvailable) {
      throw new Error('KV –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è batch –æ–±—Ä–∞–±–æ—Ç–∫–∏');
    }

    try {
      console.log('[BATCH KV] üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ–º Cloudflare KV –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏');
      
      const batchId = generateBatchId();
      const chunks = this.chunkArray(operations, this.options.batchSize);
      const jobIds = [];

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ batch
      await KVUtils.put(`${KV_KEYS.QUEUE}${batchId}`, {
        batchId: batchId,
        totalOperations: operations.length,
        totalJobs: chunks.length,
        status: 'pending',
        createdAt: new Date().toISOString(),
        options: this.options
      });

      // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ chunk
      for (let i = 0; i < chunks.length; i++) {
        const jobId = generateJobId();
        const jobData = {
          jobId,
          batchId,
          operations: chunks[i],
          status: 'pending',
          chunkIndex: i,
          totalChunks: chunks.length,
          createdAt: new Date().toISOString(),
          retries: 0,
          maxRetries: this.options.maxRetries
        };

        await KVUtils.put(`${KV_KEYS.JOB}${jobId}`, jobData);
        jobIds.push(jobId);
      }

      console.log(`[BATCH KV] ‚úÖ –°–æ–∑–¥–∞–Ω–æ ${jobIds.length} –∑–∞–¥–∞—á –¥–ª—è ${operations.length} –æ–ø–µ—Ä–∞—Ü–∏–π`);

      return {
        mode: 'kv_queue',
        batchId,
        jobIds,
        totalOperations: operations.length,
        totalJobs: chunks.length,
        estimatedDuration: Math.ceil(operations.length * 3)
      };

    } catch (error) {
      console.error('[BATCH KV] ‚ùå –û—à–∏–±–∫–∞ KV –æ–±—Ä–∞–±–æ—Ç–∫–∏:', error.message);
      throw error;
    }
  }

  async processBatchDirectly(operations, progressCallback) {
    console.log('[BATCH DIRECT] üöÄ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É');
    
    const startTime = Date.now();
    const results = [];
    const stats = {
      totalOperations: operations.length,
      successful: 0,
      failed: 0,
      duration: 0
    };

    const chunks = this.chunkArray(operations, this.options.batchSize);
    
    for (let i = 0; i < chunks.length; i++) {
      const chunk = chunks[i];
      console.log(`[BATCH DIRECT] üì¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º chunk ${i + 1}/${chunks.length} (${chunk.length} –æ–ø–µ—Ä–∞—Ü–∏–π)`);
      
      try {
        const chunkResults = await this.processChunk(chunk);
        results.push(...chunkResults);
        
        // –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        chunkResults.forEach(result => {
          if (result.status === 'success') {
            stats.successful++;
          } else {
            stats.failed++;
          }
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        if (progressCallback) {
          progressCallback({
            processed: results.length,
            total: operations.length,
            currentChunk: i + 1,
            totalChunks: chunks.length
          });
        }

        // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É chunks –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è rate limits
        if (i < chunks.length - 1) {
          await this.delay(this.options.rateLimitDelay);
        }

      } catch (chunkError) {
        console.error(`[BATCH DIRECT] ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ chunk ${i + 1}:`, chunkError.message);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –æ—à–∏–±–∫–∞–º–∏ –¥–ª—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –≤ chunk
        const errorResults = chunk.map(op => ({
          pageId: op.pageId,
          status: 'error',
          error: chunkError.message,
          retries: 0
        }));
        
        results.push(...errorResults);
        stats.failed += chunk.length;
      }
    }

    stats.duration = Date.now() - startTime;
    
    console.log(`[BATCH DIRECT] ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ. –£—Å–ø–µ—à–Ω–æ: ${stats.successful}/${stats.totalOperations}`);

    return {
      mode: 'direct_processing',
      results,
      stats,
      completed: true
    };
  }

  async processChunk(operations) {
    const results = [];
    
    const processOperation = async (operation) => {
      let retries = 0;
      
      while (retries <= this.options.maxRetries) {
        try {
          await this.notion.pages.update({
            page_id: operation.pageId,
            properties: operation.properties
          });
          
          return {
            pageId: operation.pageId,
            status: 'success',
            retries
          };
          
        } catch (error) {
          retries++;
          
          if (error.status === 429) {
            // Rate limit - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
            const retryAfter = error.headers?.['retry-after'] || 30;
            console.warn(`[OPERATION] ‚è±Ô∏è Rate limit –¥–ª—è ${operation.pageId}, –∂–¥–µ–º ${retryAfter}—Å`);
            await this.delay(retryAfter * 1000);
          } else if (retries <= this.options.maxRetries) {
            console.warn(`[OPERATION] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–ª—è ${operation.pageId}, –ø–æ–ø—ã—Ç–∫–∞ ${retries}:`, error.message);
            await this.delay(1000 * retries);
          }
          
          if (retries > this.options.maxRetries) {
            return {
              pageId: operation.pageId,
              status: 'error',
              error: error.message,
              retries: retries - 1
            };
          }
        }
      }
    };

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º concurrency
    for (let i = 0; i < operations.length; i += this.options.concurrency) {
      const batch = operations.slice(i, i + this.options.concurrency);
      const batchPromises = batch.map(op => processOperation(op));
      const batchResults = await Promise.all(batchPromises);
      results.push(...batchResults);
      
      // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
      if (i + this.options.concurrency < operations.length) {
        await this.delay(this.options.rateLimitDelay / this.options.concurrency);
      }
    }
    
    return results;
  }

  chunkArray(array, size) {
    const chunks = [];
    for (let i = 0; i < array.length; i += size) {
      chunks.push(array.slice(i, i + size));
    }
    return chunks;
  }

  delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è batch –≤ KV –æ—á–µ—Ä–µ–¥—å
export async function addBatchToKVQueue(operations, options = {}) {
  if (!isKVAvailable) {
    throw new Error('KV –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏');
  }

  console.log(`[ADD BATCH] üì¶ –î–æ–±–∞–≤–ª—è–µ–º ${operations.length} –æ–ø–µ—Ä–∞—Ü–∏–π –≤ KV –æ—á–µ—Ä–µ–¥—å`);

  const processor = new NotionBatchProcessor(null, options);
  const result = await processor.processBatchWithKV(operations);
  
  return {
    batchId: result.batchId,
    jobIds: result.jobIds
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ batch –∏–∑ KV
export async function getKVBatchStatus(jobIds) {
  if (!isKVAvailable) {
    throw new Error('KV –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞');
  }

  console.log(`[GET STATUS] üìä –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è ${jobIds.length} –∑–∞–¥–∞—á`);

  const statuses = [];
  
  for (const jobId of jobIds) {
    try {
      const jobData = await KVUtils.get(`${KV_KEYS.JOB}${jobId}`);
      
      if (jobData) {
        statuses.push({
          jobId,
          status: jobData.status || 'unknown',
          progress: jobData.progress || 0,
          operations: jobData.operations?.length || 0,
          results: jobData.results || [],
          createdAt: jobData.createdAt,
          updatedAt: jobData.updatedAt
        });
      } else {
        statuses.push({
          jobId,
          status: 'not_found',
          progress: 0,
          operations: 0,
          results: []
        });
      }
    } catch (error) {
      console.error(`[GET STATUS] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è ${jobId}:`, error.message);
      statuses.push({
        jobId,
        status: 'error',
        error: error.message,
        progress: 0,
        operations: 0,
        results: []
      });
    }
  }
  
  return statuses;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ batch –∏–∑ KV
export async function getKVBatchResults(jobIds) {
  if (!isKVAvailable) {
    throw new Error('KV –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');
  }

  console.log(`[GET RESULTS] üìä –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è ${jobIds.length} –∑–∞–¥–∞—á`);

  const allResults = [];
  
  for (const jobId of jobIds) {
    try {
      const jobData = await KVUtils.get(`${KV_KEYS.JOB}${jobId}`);
      
      if (jobData && jobData.results) {
        allResults.push(...jobData.results);
      }
    } catch (error) {
      console.error(`[GET RESULTS] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è ${jobId}:`, error.message);
    }
  }
  
  return allResults;
}

export { KVUtils, CONFIG, KV_KEYS };